<!DOCTYPE html>
<!-- Last Published: Thu Nov 21 2024 13:03:27 GMT+0000 (Coordinated Universal Time) -->
<html data-wf-domain="www.PANTOPHOBIA STUDIO" data-wf-page="66536effcb2640c5487dbae4" lang="en">
   <head>
      <meta charset="utf-8">
      <title>PANTOPHOBIA STUDIO</title>
      <meta name="description" content="We are creating video experience that transcends the ordinary, exploring the depths of the human experience through the medium the ability of your mind to believe that moving pictures are real.">
      <meta property="og:title" content="PANTOPHOBIA STUDIO">
      <meta property="og:description" content="We are creating video experience that transcends the ordinary, exploring the depths of the human experience through the medium the ability of your mind to believe that moving pictures are real.">
      <meta property="og:image" content="https://cdn.prod.website-files.com/6702c3989eee002effd810c1/673fa8df2e0f386f193558e6_favicon_dark.svg">
      <meta property="twitter:title" content="PANTOPHOBIA STUDIO">
      <meta property="twitter:description" content="We are creating video experience that transcends the ordinary, exploring the depths of the human experience through the medium the ability of your mind to believe that moving pictures are real.">
      <meta property="twitter:image" content="https://cdn.prod.website-files.com/6702c3989eee002effd810c1/673fa8df2e0f386f193558e6_favicon_dark.svg">
      <meta property="og:type" content="website">
      <meta name="twitter:card" content="summary_large_image">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="stylesheet" href="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/css/balans-2.webflow.c610ab7b8.min.css" type="text/css">
      <style>
         @media (max-width:767px) and (min-width:480px) {
         html.w-mod-js:not(.w-mod-ix) [data-w-id="a65d4543-1b51-3743-7ffb-9d3cac106572"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="4689aa94-214d-90b7-ece9-d27520b85194"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="45ecfa4a-aa03-3de5-2776-a6c329ed7bb4"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="2b5dd189-41d3-b370-0fe7-50665a4692cb"] {opacity:0;}
         }
         @media (max-width:479px) {
         html.w-mod-js:not(.w-mod-ix) [data-w-id="a65d4543-1b51-3743-7ffb-9d3cac106572"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="4689aa94-214d-90b7-ece9-d27520b85194"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="45ecfa4a-aa03-3de5-2776-a6c329ed7bb4"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="2b5dd189-41d3-b370-0fe7-50665a4692cb"] {opacity:0;}
         html.w-mod-js:not(.w-mod-ix) [data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002e7"] {opacity:0;}
         }
      </style>
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="anonymous">
      <script src="ajax/libs/webfont/1.6.26/webfont.js" type="text/javascript"></script>
      <script type="text/javascript">
         WebFont.load({
           google: {
             families: ["Work Sans:300,regular,500,600,700"]
           }
         });
      </script>
      <script type="text/javascript">
         !function(o,c){var n=c.documentElement,t=" w-mod-";n.className+=t+"js",("ontouchstart"in o||o.DocumentTouch&&c instanceof DocumentTouch)&&(n.className+=t+"touch")}(window,document);
      </script>
      <link rel="shortcut icon" href="https://cdn.prod.website-files.com/6702c3989eee002effd810c1/673fa8df2e0f386f193558e6_favicon_dark.svg" type="image/x-icon">
      <link rel="apple-touch-icon" href="https://cdn.prod.website-files.com/6702c3989eee002effd810c1/673fa8df2e0f386f193558e6_favicon_dark.svg">
      <!-- Swiper -->
      <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
      <!-- Preload images from custom code section -->
      <link rel="preload" href="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a7c7_photo.jpg" as="image">
      <link rel="preload" href="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a82f_photo%20(1).jpg" as="image">
      <link rel="preload" href="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a7c4_Group%2037205.jpg" as="image">
      <link rel="preload" href="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a7c5_Group%2037206.jpg" as="image">
      <!-- Scrumble -->
      <style>
         [data-scrumble-text] {
         opacity: 0;
         }
         [data-scrumble-multiline="true"] {
         flex-wrap: wrap;
         }
      </style>
      <!-- Scrollbar -->
      <style>
         html, body {
         scrollbar-width: thin;
         scrollbar-color: var(--red) transparent;
         }
         ::-webkit-scrollbar {
         width: 0.5rem;
         height: 0.5rem;
         }
         ::-webkit-scrollbar-track {
         background: transparent; /* color of the tracking area */
         }
         ::-webkit-scrollbar-thumb {
         background: var(--red);
         border-radius: 100px;
         }
      </style>
      <!-- Selection -->
      <style>
         ::selection {
         color: var(--black);
         background-color: var(--red);
         }
      </style>
      <style>
         body {
         overflow-x: hidden !important;
         }
         body:not(.opened) {
         overflow: hidden !important;
         height: 100svh !important;
         }
         .home_works_pagination_main_text {
         opacity: 0.5;
         transition: all 0.5s ease-in-out;
         }
         .home_works_pagination_main_circle {
         width: 0rem;
         height: 0rem;
         margin-bottom: 0rem;
         background-color: #fff;
         transition: all 0.5s ease-in-out;
         }
         .home_works_pagination_main_line {
         height: 1rem;
         background-color: #fff;
         transition: all 0.5s ease-in-out;
         }
         /* Active */
         .home_works_pagination_wrapper.active .home_works_pagination_main_text {
         opacity: 1;
         }
         .home_works_pagination_wrapper.active .home_works_pagination_main_circle {
         width: 0.3rem;
         height: 0.3rem;
         margin-bottom: 0.5rem;
         background-color: #d0311d;
         }
         .home_works_pagination_wrapper.active .home_works_pagination_main_line {
         height: 1.25rem;
         background-color: #d0311d;
         }
         /* Inactive */
         .home_works_pagination_wrapper.inactive .home_works_pagination_main_text {
         opacity: 0.5;
         }
         .home_works_pagination_wrapper.inactive .home_works_pagination_main_circle {
         width: 0rem;
         height: 0rem;
         margin-bottom: 0rem;
         background-color: #fff;
         }
         .home_works_pagination_wrapper.inactive .home_works_pagination_main_line {
         height: 1rem;
         background-color: #fff;
         }
      </style>
   </head>
   <body class="body_home">
      <div data-w-id="11bc584d-f076-dcfd-f5aa-ff2048c6cc52" data-preloader-trigger="true" class="hidden_trigger"></div>
      <div data-w-id="277d73fc-16b1-a9f8-6aec-d8e876609b51" data-intro-trigger="true" class="hidden_trigger"></div>
      <div data-w-id="38b785f2-84e4-58f9-007e-44c2fd8d842a" data-skip-trigger="true" class="hidden_trigger"></div>
      <div data-w-id="a837843c-b382-b3c8-8ff5-befb3210805a" class="home_post_entry_container">
         <div data-poster-url="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66a0e5270ab347440ca6b58b_intro-web-page-ep96fyuc_aMM5UzOP-poster-00001.jpg" data-video-urls="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66a0e5270ab347440ca6b58b_intro-web-page-ep96fyuc_aMM5UzOP-transcode.mp4,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66a0e5270ab347440ca6b58b_intro-web-page-ep96fyuc_aMM5UzOP-transcode.webm" data-autoplay="false" data-loop="false" data-wf-ignore="true" class="home_post_entry_video w-background-video w-background-video-atom">
            <video id="47274ee6-a662-7cbe-8880-42f18fbd0a96-video" style="background-image:url(&quot;https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66a0e5270ab347440ca6b58b_intro-web-page-ep96fyuc_aMM5UzOP-poster-00001.jpg&quot;)" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
               <source src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66a0e5270ab347440ca6b58b_intro-web-page-ep96fyuc_aMM5UzOP-transcode.mp4" data-wf-ignore="true">
               <source src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66a0e5270ab347440ca6b58b_intro-web-page-ep96fyuc_aMM5UzOP-transcode.webm" data-wf-ignore="true">
            </video>
         </div>
      </div>
      <div data-w-id="e4a7cd25-534d-a685-1d23-eba6efc5b5cd" style="display:flex" class="entry_element">
         <div data-w-id="fe6deb3f-4fda-d872-b585-ade91184ad99" style="opacity:0" class="loader_txt">Loading...</div>
         <div data-w-id="204f93ca-ebbd-9ae1-68cb-48532e4bc02f" class="loader">
            <div data-w-id="fc7b4fe5-7340-0068-163e-98d0cfa411ad" style="opacity:0" class="percentages">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>94<br>95<br>96<br>97<br>98<br>99<br>100</div>
            <div class="loader_overlay"></div>
         </div>
         <div style="opacity:0;-webkit-transform:translate3d(0, 0, 0) scale3d(0.6, 0.6, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 0, 0) scale3d(0.6, 0.6, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 0, 0) scale3d(0.6, 0.6, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 0, 0) scale3d(0.6, 0.6, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0)" class="hero_frames corner_border">
            <div class="corners w-embed">
               <div class="corner-borders corner-borders--left"></div>
               <div class="corner-borders corner-borders--right"></div>
            </div>
            <div class="dummy"></div>
         </div>
         <div data-w-id="e4a7cd25-534d-a685-1d23-eba6efc5b5d1" data-is-ix2-target="1" class="entry_lottie" data-animation-type="lottie" data-src="Pantophobia_Studio_dark.jpg" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="4.266666666666667" data-duration="4"></div>
         <div data-w-id="fc821138-02eb-d8f3-3583-57a6a69ad1be" style="display:none" class="entry-close-overlay"></div>
         <div data-w-id="b1fac05b-c5ba-c5d0-5c5f-8632112fecbb" style="display:none;-webkit-transform:translate3d(0, 32svh, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 32svh, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 32svh, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 32svh, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);opacity:0" class="text">Click anywhere</div>
      </div>
      <div style="opacity:0;display:none" class="navbarwrapper navbar_fixed_wrapper">
         <div class="navbar">
            <div class="navbar_container">
               <div class="navbar_container_inner">
                  <a href="index.htm" aria-current="page" class="navbar_main_link w-inline-block w--current">
                     <style>
                        .navbar_slash_icon img {
                          transition: filter 0.3s; /* Smooth transition for color change */
                        }
                      
                        .navbar_slash_icon img:hover {
                          filter: brightness(0) saturate(100%) invert(47%) sepia(89%) saturate(7488%) hue-rotate(0deg) brightness(102%) contrast(105%);
                        }
                      </style>
                      
                      <div class="navbar_slash_icon w-embed">
                        <img src="https://cdn.prod.website-files.com/6702c3989eee002effd810c1/674036c6cda36dee3da91ffa_favicon_dark_transparent.svg" alt="Logo" style="transform: scale(2.5);">
                      </div>
                      
                    
                  </a>
                  <a data-w-id="a4392ddf-e7c3-97c0-d47a-51ddd8916414" href="#footer" class="navbar_contact_us_container w-inline-block">
                     <div class="navbar_contact_us_text">contact us</div>
                     <div class="navbar_contact_us_icon footer_social_link_icon w-embed">
                        <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 14 15" fill="none">
                           <g filter="url(#filter0_d_4652_1703)">
                              <path d="M11.9853 2.25739C11.9853 1.98125 11.7614 1.75739 11.4853 1.75739L6.98528 1.75739C6.70914 1.75739 6.48528 1.98125 6.48528 2.25739C6.48528 2.53354 6.70914 2.75739 6.98528 2.75739L10.9853 2.75739L10.9853 6.75739C10.9853 7.03354 11.2091 7.25739 11.4853 7.25739C11.7614 7.2574 11.9853 7.03354 11.9853 6.75739L11.9853 2.25739ZM3.35355 11.0962L11.8388 2.61095L11.1317 1.90384L2.64645 10.3891L3.35355 11.0962Z" fill="CurrentColor"></path>
                           </g>
                           <defs>
                              <filter id="filter0_d_4652_1703" x="0.646484" y="0.757324" width="13.3379" height="13.3389" filterunits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                 <feflood flood-opacity="0" result="BackgroundImageFix"></feflood>
                                 <fecolormatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"></fecolormatrix>
                                 <feoffset dy="1"></feoffset>
                                 <fegaussianblur stddeviation="1"></fegaussianblur>
                                 <fecomposite in2="hardAlpha" operator="out"></fecomposite>
                                 <fecolormatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.6 0"></fecolormatrix>
                                 <feblend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_4652_1703"></feblend>
                                 <feblend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_4652_1703" result="shape"></feblend>
                              </filter>
                           </defs>
                        </svg>
                     </div>
                  </a>
                  <div data-w-id="a6de616a-e46f-16d1-1616-799d0d6529db" class="navbar_menu_icon w-embed">
                     <div class="menu-icon interactive">
                        <div class="menu-icon-line"></div>
                     </div>
                     <style>
                        .menu-icon {
                        position: relative;
                        width: 100%;
                        height: 100%;
                        }
                        .menu-icon::before,
                        .menu-icon::after {
                        content: "";
                        display: block;
                        }
                        .menu-icon-line,
                        .menu-icon::before,
                        .menu-icon::after {
                        position: absolute;
                        width: 100%;
                        height: 0.19rem;
                        background-color: white;
                        transition: all 0.3s ease-out;
                        border-radius: 1rem;
                        right: 0;
                        transform-origin: center;
                        box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.60);
                        }
                        .menu-icon-line {
                        top: calc(50% - (0.19rem / 2));
                        }
                        .menu-icon::before {
                        top: 0;
                        }
                        .menu-icon::after {
                        bottom: 0;
                        }
                        .menu-icon:not(.close):hover .menu-icon-line {
                        width: 66%;
                        }
                        .menu-icon:not(.close):hover::after {
                        width: 33%;
                        }
                     </style>
                  </div>
               </div>
            </div>
            <article data-w-id="b460834a-360c-3423-d93a-36b11f7cbf93" class="navbar_menu">
               <div class="navbar_menu_inner">
                  <div class="navbar_links">
                     <a data-w-id="228e6919-f258-8fc8-7a38-912fdb4f7a8d" href="index.htm" aria-current="page" class="navbar_link_block w-inline-block w--current">
                        <div class="navbar_link_container navbar_link_container_balans">
      
                        </div>
                     </a>
                     <a data-revieal="" data-w-id="4116d4b3-601e-e9eb-ff59-e50ea20be749" href="works.html" class="navbar_link_block w-inline-block">
                        <div class="navbar_link_container navbar_link_container_works">
                           <div class="navbar_link navbar_link_works">WORKS</div>
                        </div>
                     </a>
                     <a data-revieal="" data-w-id="762555e1-686d-c80c-41ff-a2470a6dca63" href="about-us.html" class="navbar_link_block w-inline-block">
                        <div class="navbar_link_container navbar_link_container_about">
                           <div class="navbar_link navbar_link_about">ABOUT</div>
                        </div>
                     </a>
                  </div>
                  <div class="navbar_bg_wrapper">
                     <div class="navbar_bg_video w-embed">
                        <div style="width: 100%; height: 100%;" class="w-background-video w-background-video-atom">
                           <video playsinline="" loop="" muted="" autoplay="" loop="" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
                              <source data-src="https://src.lynksen.com/balans/menu.mp4" data-intersection="true" data-wf-ignore="true">
                           </video>
                        </div>
                     </div>
                     <div class="navbar_bg"></div>
                  </div>
               </div>
            </article>
         </div>
      </div>
      <section data-w-id="e4a7cd25-534d-a685-1d23-eba6efc5b5cb" class="entrance">
         <div class="entrance_container">
            <section class="hero">
               <div class="hero-video-frame corner_border">
                  <div class="hero-content">
                     <div class="reveal_container">
                        <div data-w-id="88d5bfd4-5fb5-93eb-8226-d27236cf8fa1" style="opacity:0;-webkit-transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0)" class="reveal_container-child">
                           <div class="div-block-3 hero-title">
                              <div class="text-block h5 hero-h5">KEEP</div>
                              <div class="text-block h5 h5-red h5-red-hero">ONE&#x27;S</div>
                              <h1 class="h5 hero-h5">BALANS</h1>
                           </div>
                        </div>
                     </div>
                     <div class="reveal_container">
                        <div data-w-id="9c1a0a5c-28d9-36af-3141-d19bfa4c1e21" style="opacity:0;-webkit-transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-moz-transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);-ms-transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0);transform:translate3d(0, 100%, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(0) skew(0, 0)" class="reveal_container-child">
                           <div class="hero-subtitle">
                              <div class="text">We are creating video experience that transcends the ordinary, exploring the depths of the human experience through the medium the ability of your mind to believe that moving pictures are real. We are making them real!</div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="corners w-embed">
                     <div class="corner-borders corner-borders--left"></div>
                     <div class="corner-borders corner-borders--right"></div>
                  </div>
                  <div class="hero_inner_frame" data-w-id="8980902e-d501-7fe9-0240-1cee78f728b2" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6655d016dbb9a17929abad10_Small_frame%20lottie.lottie" data-loop="1" data-direction="-1" data-autoplay="1" data-is-ix2-target="0" data-renderer="svg" data-default-duration="4.933333333333334" data-duration="5"></div>
                  <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664fa460b69844fac89a730b_Icon-BatteryMedium.svg" loading="lazy" alt="" class="hero_inner_frame_batter">
                  <div style="opacity:0" class="w-layout-vflex hero_inner_frame_text">
                     <div class="text">Turn on<br>Tune in<br>Drop out</div>
                  </div>
                  <div class="w-layout-hflex hero_inner_frame_rec">
                     <div class="red_circle"></div>
                     <div class="text text-btn">REC</div>
                  </div>
                  <a href="#" class="hero_inner_frame_scroll w-inline-block"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664fa460c1391ffb0ba3491f_Scroll.svg" loading="lazy" alt="" class="hero_inner_frame_scroll"></a>
                  <div class="home_hero_volume_container">
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6226b47f70a09526a4f_icon_sound.svg" loading="lazy" alt="" class="home_hero_volume_icon_sound"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6dac5ce47afb589b59d_icon_mute.svg" loading="lazy" alt="" class="home_hero_volume_icon_mute">
                     <div class="home_hero_volume_text">volume off</div>
                  </div>
               </div>
               <div class="hero_video w-embed">
                  <div style="width: 100%; height: 100%; position: relative;" class="w-background-video w-background-video-atom">
                     <div style="position: absolute; inset: 0; background-color: rgba(0,0,0,0.6)"></div>
                     <video playsinline="" loop="" muted="" loop="" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
                        <source src="https://src.lynksen.com/balans/home/hero.mp4" data-wf-ignore="true">
                     </video>
                  </div>
               </div>
            </section>
            <div class="section1">
               <div class="about-row">
                  <div class="reveal_container">
                     <div data-w-id="6b149f6b-d2ed-3aab-e0aa-3decb64c1f5d" class="reveal_container-child">
                        <h3 class="h3 h3-red">PANTOPHOBIA STUDIO</h3>
                     </div>
                  </div>
                  <div class="div-block-4">
                     <div class="reveal_container reveal_container-2">
                        <div data-w-id="9c21380d-76f0-f75e-6f40-55663abd2427" class="reveal_container-child">
                           <div class="h3">CAN BE</div>
                        </div>
                     </div>
                     <div data-w-id="e4a7cd25-534d-a685-1d23-eba6efc5b5fc" class="about_s1_r1_txt">Our focus is on art and fashion, we have a keen eye for aesthetics and a deep understanding of the advertisement industry.</div>
                  </div>
                  <div class="reveal_container">
                     <div data-w-id="d75971d1-b72f-9ad1-95e6-d0793477184a" class="reveal_container-child">
                        <div class="h3">DESCRIBED AS</div>
                     </div>
                  </div>
               </div>
               <div class="about-row about-row2">
                  <div data-w-id="9e2bb88c-bd7c-697f-41c0-a1dabef1ce8a" class="reveal_container partner_focus_box">
                     <div data-w-id="9e2bb88c-bd7c-697f-41c0-a1dabef1ce8b" class="reveal_container-child">
                        <div class="corner_border partners_focus_box">
                           <img data-distortion="single" class="image-3 turbulent" src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66351f4da08e3f3a3e5db1ff_image%2049%20(1).jpg" alt="" sizes="(max-width: 767px) 100vw, (max-width: 991px) 35vw, 40vw" loading="eager" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66351f4da08e3f3a3e5db1ff_image%2049%20(1)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66351f4da08e3f3a3e5db1ff_image%2049%20(1)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66351f4da08e3f3a3e5db1ff_image%2049%20(1)-p-1080.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66351f4da08e3f3a3e5db1ff_image%2049%20(1).jpg">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="div-block-5">
                     <div class="reveal_container">
                        <div class="reveal_container-child">
                           <div class="div-block-4">
                              <div data-scrumble-text="hero-section-1" class="h3 h3_inline">THE</div>
                              <div data-w-id="e4a7cd25-534d-a685-1d23-eba6efc5b608" class="about_s1_r2_txt">We take pride in our ability to turn abstract concepts into powerful and captivating moving image.</div>
                           </div>
                        </div>
                     </div>
                     <div class="reveal_container">
                        <div class="reveal_container-child">
                           <div data-scrumble-text="hero-section-1" class="h3">COLLECTIVE</div>
                        </div>
                     </div>
                     <div class="reveal_container">
                        <div class="reveal_container-child">
                           <div class="div-block-6">
                              <div data-scrumble-text="hero-section-1" class="h3 h3-red">MIND</div>
                              <div data-scrumble-text="hero-section-1" class="h3">THAT</div>
                           </div>
                        </div>
                     </div>
                     <div class="reveal_container">
                        <div data-w-id="599e49a4-4d71-859e-f1a9-d7f7bc818171" class="reveal_container-child">
                           <div data-scrumble-text="hero-section-1" class="h3">TRANSCEND</div>
                        </div>
                     </div>
                  </div>
                  <div data-w-id="fabe4d9e-5e3c-af2a-db6d-cf28fefc4266" data-scrumble-progress="hero-section-1" data-scrumble-duration="300" class="scrumble_progress"></div>
               </div>
            </div>
            <div class="section2">
               <div class="about-row about-row2">
                  <div class="div-block-5">
                     <div data-scrumble-multiline="true" data-scrumble-text="hero-section-2" class="h3">PRE-EXISTING <br>IDEAS AND <br>MANIFEST</div>
                     <div class="div-block-6">
                        <div data-scrumble-text="hero-section-2" class="h3 h3-red">UNIQUE</div>
                     </div>
                     <div data-scrumble-text="hero-section-2" class="h3">CONCEPTS</div>
                  </div>
                  <div data-w-id="08d87ae3-2f31-ae17-0927-0eeeb23d9fef" class="reveal_container partner_focus_box">
                     <div data-w-id="08d87ae3-2f31-ae17-0927-0eeeb23d9ff0" class="reveal_container-child">
                        <div class="corner_border partners_focus_box">
                           <img data-distortion="single" class="image-3 turbulent" src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1).jpg" alt="" sizes="(max-width: 767px) 100vw, (max-width: 991px) 35vw, 40vw" loading="eager" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1)-p-1080.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1).jpg">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div data-w-id="ad48e8b4-6821-172a-5f9f-42d807aff84b" data-scrumble-progress="hero-section-2" data-scrumble-duration="300" class="scrumble_progress"></div>
               </div>
               <div class="div-block-4 about_row4">
                  <div class="about_s2_r2_p1">We are using the latest technology and techniques only as a tool, but not a goal, we work closely with our clients to bring our unique vision to your identity, in a way that truly captures the essence of their work.</div>
                  <div class="reveal_container about_row4_h3">
                     <div data-w-id="5e744f66-03bb-e374-97c6-d9d59b0bf582" class="reveal_container-child">
                        <div class="h3 about_row4_h3">IDEAS AND<br>SOLUTIONS.</div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="section3_lottie" data-w-id="e4a7cd25-534d-a685-1d23-eba6efc5b62b" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66697a700ff384482b565cb6_Nick_blur%20fuck12.06_.lottie" data-loop="1" data-direction="1" data-autoplay="1" data-is-ix2-target="0" data-renderer="svg" data-default-duration="2.8333333333333335" data-duration="0"></div>
            <div class="curtainbottom"></div>
         </div>
      </section>
      <div data-w-id="169d9183-de25-865d-db29-a0a1f3102b14" class="w-layout-vflex about_mobile">
         <div class="about_mobile_sticky_container">
            <div data-w-id="1a0b45b8-d989-4d50-9d93-0498eda1ce5f" class="w-layout-hflex about_mobile_txtrow">
               <div data-scrumble-text="hero-about-mobile-1" class="h3 h3-red">PANTOPHOBIA STUDIO</div>
               <div data-scrumble-text="hero-about-mobile-1" class="h3">CAN</div>
            </div>
            <div data-scrumble-text="hero-about-mobile-1" class="h3">BE DESCRIBED AS THE</div>
            <div class="w-layout-hflex about_mobile_txtrow">
               <div data-scrumble-text="hero-about-mobile-1" class="h3">COLLECTIVE</div>
               <div data-scrumble-text="hero-about-mobile-1" class="h3 h3-red">MIND</div>
            </div>
            <div data-scrumble-text="hero-about-mobile-1" class="h3">THAT TRANSCENDS</div>
            <div data-scrumble-text="hero-about-mobile-1" class="h3">PRE-EXISTING IDEAS</div>
            <div data-scrumble-text="hero-about-mobile-1" class="h3">AND MANIFEST</div>
            <div class="w-layout-hflex about_mobile_txtrow">
               <div data-scrumble-text="hero-about-mobile-1" class="h3 h3-red">UNIQUE</div>
               <div data-scrumble-text="hero-about-mobile-1" class="h3">CONCEPTS,</div>
            </div>
            <div data-scrumble-text="hero-about-mobile-1" class="h3">IDEAS AND</div>
            <div data-scrumble-text="hero-about-mobile-1" class="h3">SOLUTIONS.</div>
            <div data-w-id="fddac1ea-6367-134b-d3b3-80456a653fb0" data-scrumble-progress="hero-about-mobile-1" data-scrumble-duration="300" class="scrumble_progress"></div>
            <div data-w-id="2b5dd189-41d3-b370-0fe7-50665a4692cb" class="about_mobile_img hero"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6660c11d17562d50605af620_image%2051%20(1).jpg" loading="lazy" sizes="(max-width: 767px) 85vw, 100vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6660c11d17562d50605af620_image%2051%20(1)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6660c11d17562d50605af620_image%2051%20(1).jpg" alt="" class="about_mobile_img"></div>
            <div data-w-id="a65d4543-1b51-3743-7ffb-9d3cac106572" class="text about_mobile_txt">Our focus is on art and fashion, we have a keen eye for aesthetics and a deep understanding of the advertisement industry.<br><br>We take pride in our ability to turn abstract concepts into powerful and captivating moving image.</div>
            <div data-w-id="4689aa94-214d-90b7-ece9-d27520b85194" class="about_mobile_img hero about_mobile_img2"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1).jpg" loading="lazy" sizes="(max-width: 767px) 85vw, 100vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1)-p-1080.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6636fa84ecb1594f7438b9c0_image%2050%20(1).jpg" alt="PANTOPHOBIA STUDIO video shooting" class="about_mobile_img"></div>
            <div data-w-id="45ecfa4a-aa03-3de5-2776-a6c329ed7bb4" class="text about_mobile_txt">We are using the latest technology and techniques only as a tool, but not a goal, we work closely with our clients to bring our unique vision to your identity, in a way that truly captures the essence of their work.</div>
            <div data-w-id="ed19ed37-384f-16cf-cfa1-f8a087e72653" class="mobile_about_lottie_wrapper">
               <div class="about_mobile_lottie lottie-animation" data-w-id="533abe76-2bdd-d4cf-89bc-21703234a8c6" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66697a700ff384482b565cb6_Nick_blur%20fuck12.06_.lottie" data-loop="1" data-direction="1" data-autoplay="1" data-is-ix2-target="0" data-renderer="svg" data-default-duration="2.8333333333333335" data-duration="0"></div>
               <div class="div-block-18"></div>
            </div>
         </div>
      </div>
      <section data-w-id="cc5f5a36-2140-8a35-8c6c-cf0feda2a69d" class="our-works">
         <div class="sticky-container-2">
            <div class="ourworks_container">
               <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0607" class="works_heading_conteiner">
                  <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0608" class="w-layout-hflex works_heading_2">
                     <div class="works_heading_wrapper_2 _12">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f060a" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _11">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f060d" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _10">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0610" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _9">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0613" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _8">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0616" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _7">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0619" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _6">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f061c" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _5">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f061f" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _4">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0622" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _3">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0625" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _2">
                        <div data-w-id="94f5424a-dbec-4483-8a99-36fdc92f0628" class="ourwork_title_2">OUR WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _1">
                        <div data-scrumble-text="our-works-mobile-title" class="ourwork_title_2">OUR WORKS</div>
                        <div data-scrumble-progress="our-works-mobile-title" data-scrumble-duration="300" data-scrumble-responsive="767" class="scrumble_progress"></div>
                     </div>
                  </div>
               </div>
               <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fdd" class="works_heading_conteiner_mobile">
                  <div class="w-layout-hflex works_heading_2">
                     <div class="works_heading_wrapper_2 _12">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fe0" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _11">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fe3" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _10">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fe6" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _9">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fe9" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _8">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fec" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _7">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10fef" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _6">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10ff2" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _5">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10ff5" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _4">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10ff8" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _3">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10ffb" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _2">
                        <div data-w-id="83463946-0a8e-84e4-8e7f-9890e0f10ffe" class="ourwork_title_2">WORKS</div>
                     </div>
                     <div class="works_heading_wrapper_2 _1">
                        <div class="ourwork_title_2">WORKS</div>
                     </div>
                  </div>
               </div>
               <div class="ourworks_scroller">
                  <div class="text ourworks_text1">Our visual is a type of marketing strategy that<br>pushes boundaries and takes risks. </div>
                  <div data-w-id="2649bd19-b4fc-7c6d-8374-42608d9d1cb4" class="w-layout-hflex ourworks_scroll_text recanimate">
                     <div class="text text-btn scroll_text">SCROLL</div>
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66542fc1af0a6b10acbba96f_redTriangle.svg" loading="lazy" alt="" class="ourworks_scroll_text_arrow scroll_arrow">
                  </div>
                  <div data-w-id="cc5f5a36-2140-8a35-8c6c-cf0feda2a6b0" class="w-layout-hflex hero_inner_frame_rec recanimate ourworks_rec">
                     <div class="red_circle rec_circle"></div>
                     <div class="text text-btn rec_text">REC</div>
                  </div>
                  <div class="w-layout-hflex scrolling_works_imgs">
                     <div class="distortionslider w-embed">
                        <style>
                           .distortion-slider {
                           min-height: 100vh;
                           min-width: 136svw;
                           display: flex;
                           justify-content: flex-start;
                           align-items: center;
                           gap: 7.5vw;
                           }
                           .distortion-slider__wrapper {
                           padding: 1rem;
                           position: relative;
                           }
                           .distortion-slider__image {
                           height: 100%;
                           width: 100%;
                           object-fit: contain;
                           background-color: #000;
                           }
                           .distortion-slider__wrapper_1 {
                           width: 24.5svw;
                           top: -20%;
                           }
                           .distortion-slider__wrapper_2 {
                           width: 18svw;
                           top: 25%;
                           }
                           .distortion-slider__wrapper_3 {
                           width: 32.25svw;
                           top: -20%;
                           }
                           .distortion-slider__wrapper_4 {
                           width: 12.3svw;
                           top: 24%;
                           }
                           .distortion canvas {
                           width: 100% !important;
                           height: 100% !important;
                           }
                        </style>
                        <!-- div used to create our plane -->
                        <div class="plane distortion-slider__wrapper distortion-slider__wrapper_1">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                           <!-- image that will be used as texture by our plane -->
                           <img src="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a7c7_photo.jpg" crossorigin="" class="distortion-slider__image">
                        </div>
                        <div class="plane distortion-slider__wrapper distortion-slider__wrapper_2">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                           <!-- image that will be used as texture by our plane -->
                           <img src="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a82f_photo%20(1).jpg" crossorigin="" class="distortion-slider__image">
                        </div>
                        <div class="plane distortion-slider__wrapper distortion-slider__wrapper_3">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                           <!-- image that will be used as texture by our plane -->
                           <img src="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a7c4_Group%2037205.jpg" crossorigin="" class="distortion-slider__image">
                        </div>
                        <div class="plane distortion-slider__wrapper distortion-slider__wrapper_4">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                           <!-- image that will be used as texture by our plane -->
                           <img src="https://cdn.prod.website-files.com/66974d5b4190e6238200a727/66974d5b4190e6238200a7c5_Group%2037206.jpg" crossorigin="" class="distortion-slider__image">
                        </div>
                     </div>
                  </div>
                  <div class="w-layout-hflex works_vid_container">
                     <div class="w-layout-hflex works_vid_block">
                        <div data-cursor-hover="view" class="ourwork_slider_video w-embed">
                           <div style="width: 100%; height: 100%; position: relative;" class="w-background-video w-background-video-atom">
                              <a href="projects/2ccm.html" style="cursor: none; display: block; width: 100%; height: 100%;">
                                 <video style="width: 100%; height: 100%; object-fit: cover;" playsinline="" loop="" muted="" autoplay="" loop="" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
                                    <source src="https://src.lynksen.com/balans/projects/2ccm/2ccm.mp4" data-wf-ignore="true">
                                 </video>
                              </a>
                              <div data-video-state-button="" style="position: absolute; right: 1rem; bottom: 1rem;">
                                 <svg style="position: relative; opacity: 1; transition: all 0.2s ease-in-out;" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewbox="0 0 44 44" fill="none" title="pause">
                                    <circle fill="#2e2e2e" cx="22" cy="22" r="22"></circle>
                                    <rect x="11" y="9.4" width="7.8" height="25.1" rx="1" fill="white"></rect>
                                    <rect x="25.1" y="9.4" width="7.8" height="25.1" rx="1" fill="white"></rect>
                                 </svg>
                                 <svg style="position: absolute; top: 0; left: 0; opacity: 0; transition: all 0.2s ease-in-out;" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewbox="0 0 44 44" fill="none" title="play">
                                    <circle fill="#2e2e2e" cx="22" cy="22" r="22"></circle>
                                    <g transform="translate(6,3) scale(1.57)">
                                       <path d="M4 19.2902V4.70985C4 3.94502 4.82366 3.46331 5.49026 3.83827L18.4505 11.1284C19.1302 11.5107 19.1302 12.4893 18.4505 12.8716L5.49026 20.1617C4.82366 20.5367 4 20.055 4 19.2902Z" fill="white"></path>
                                    </g>
                                 </svg>
                              </div>
                           </div>
                        </div>
                        <div class="w-layout-hflex works_vid_caption">
                           <div>2CCM</div>
                           <div class="ourworks_volume_wrapper">
                              <div class="ourworks_volume_button_wrapper">
                                 <div class="corners_button_wrapper corner_border corner_border_small">
                                    <a href="#" class="corners_button w-button">volume off</a>
                                    <div class="corners_button_frame">
                                       <div class="corners w-embed">
                                          <div class="corner-borders corner-borders--left"></div>
                                          <div class="corner-borders corner-borders--right"></div>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                              <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6226b47f70a09526a4f_icon_sound.svg" loading="lazy" alt="" class="ourworks_volume_icon_sound"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6dac5ce47afb589b59d_icon_mute.svg" loading="lazy" alt="" class="ourworks_volume_icon_mute">
                           </div>
                           <div>2017</div>
                        </div>
                     </div>
                     <div class="w-layout-hflex works_vid_block">
                        <div data-cursor-hover="view" class="ourwork_slider_video w-embed">
                           <div style="width: 100%; height: 100%; position: relative;" class="w-background-video w-background-video-atom">
                              <a href="projects/c-r-z.html" style="cursor: none; display: block; width: 100%; height: 100%;">
                                 <video style="width: 100%; height: 100%; object-fit: cover;" playsinline="" loop="" muted="" autoplay="" loop="" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
                                    <source src="https://src.lynksen.com/balans/projects/crz/crz.mp4" data-wf-ignore="true">
                                 </video>
                              </a>
                              <div data-video-state-button="" style="position: absolute; right: 1rem; bottom: 1rem;">
                                 <svg style="position: relative; opacity: 1; transition: all 0.2s ease-in-out;" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewbox="0 0 44 44" fill="none" title="pause">
                                    <circle fill="#2e2e2e" cx="22" cy="22" r="22"></circle>
                                    <rect x="11" y="9.4" width="7.8" height="25.1" rx="1" fill="white"></rect>
                                    <rect x="25.1" y="9.4" width="7.8" height="25.1" rx="1" fill="white"></rect>
                                 </svg>
                                 <svg style="position: absolute; top: 0; left: 0; opacity: 0; transition: all 0.2s ease-in-out;" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewbox="0 0 44 44" fill="none" title="play">
                                    <circle fill="#2e2e2e" cx="22" cy="22" r="22"></circle>
                                    <g transform="translate(6,3) scale(1.57)">
                                       <path d="M4 19.2902V4.70985C4 3.94502 4.82366 3.46331 5.49026 3.83827L18.4505 11.1284C19.1302 11.5107 19.1302 12.4893 18.4505 12.8716L5.49026 20.1617C4.82366 20.5367 4 20.055 4 19.2902Z" fill="white"></path>
                                    </g>
                                 </svg>
                              </div>
                           </div>
                        </div>
                        <div class="w-layout-hflex works_vid_caption">
                           <div>C.R.Z</div>
                           <div class="ourworks_volume_wrapper">
                              <div class="ourworks_volume_button_wrapper">
                                 <div class="corners_button_wrapper corner_border corner_border_small">
                                    <a href="#" class="corners_button w-button">volume off</a>
                                    <div class="corners_button_frame">
                                       <div class="corners w-embed">
                                          <div class="corner-borders corner-borders--left"></div>
                                          <div class="corner-borders corner-borders--right"></div>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                              <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6226b47f70a09526a4f_icon_sound.svg" loading="lazy" alt="" class="ourworks_volume_icon_sound"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6dac5ce47afb589b59d_icon_mute.svg" loading="lazy" alt="" class="ourworks_volume_icon_mute">
                           </div>
                           <div>2018</div>
                        </div>
                     </div>
                     <div class="w-layout-hflex works_vid_block">
                        <div data-cursor-hover="view" class="ourwork_slider_video w-embed">
                           <div style="width: 100%; height: 100%; postion: relative;" class="w-background-video w-background-video-atom">
                              <a href="projects/cctv.html" style="cursor: none; display: block; width: 100%; height: 100%;">
                                 <video style="width: 100%; height: 100%; object-fit: cover;" playsinline="" loop="" muted="" autoplay="" loop="" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
                                    <source src="https://src.lynksen.com/balans/projects/cctv/cctv.mp4" data-wf-ignore="true">
                                 </video>
                              </a>
                              <div data-video-state-button="" style="position: absolute; right: 1rem; bottom: 1rem;">
                                 <svg style="position: relative; opacity: 1; transition: all 0.2s ease-in-out;" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewbox="0 0 44 44" fill="none" title="pause">
                                    <circle fill="#2e2e2e" cx="22" cy="22" r="22"></circle>
                                    <rect x="11" y="9.4" width="7.8" height="25.1" rx="1" fill="white"></rect>
                                    <rect x="25.1" y="9.4" width="7.8" height="25.1" rx="1" fill="white"></rect>
                                 </svg>
                                 <svg style="position: absolute; top: 0; left: 0; opacity: 0; transition: all 0.2s ease-in-out;" xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewbox="0 0 44 44" fill="none" title="play">
                                    <circle fill="#2e2e2e" cx="22" cy="22" r="22"></circle>
                                    <g transform="translate(6,3) scale(1.57)">
                                       <path d="M4 19.2902V4.70985C4 3.94502 4.82366 3.46331 5.49026 3.83827L18.4505 11.1284C19.1302 11.5107 19.1302 12.4893 18.4505 12.8716L5.49026 20.1617C4.82366 20.5367 4 20.055 4 19.2902Z" fill="white"></path>
                                    </g>
                                 </svg>
                              </div>
                           </div>
                        </div>
                        <div class="w-layout-hflex works_vid_caption">
                           <div>CCTV</div>
                           <div class="ourworks_volume_wrapper">
                              <div class="ourworks_volume_button_wrapper">
                                 <div class="corners_button_wrapper corner_border corner_border_small">
                                    <a href="#" class="corners_button w-button">volume off</a>
                                    <div class="corners_button_frame">
                                       <div class="corners w-embed">
                                          <div class="corner-borders corner-borders--left"></div>
                                          <div class="corner-borders corner-borders--right"></div>
                                       </div>
                                    </div>
                                 </div>
                              </div>
                              <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6226b47f70a09526a4f_icon_sound.svg" loading="lazy" alt="" class="ourworks_volume_icon_sound"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/6656f6dac5ce47afb589b59d_icon_mute.svg" loading="lazy" alt="" class="ourworks_volume_icon_mute">
                           </div>
                           <div>2022</div>
                        </div>
                     </div>
                     <a href="works.html" class="link-block w-inline-block">
                        <div class="ourworks_seeall corner_border">
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                           <div data-w-id="915fac07-eea8-8df4-5ace-258c813166e0" class="w-layout-hflex button_arrow">
                              <div class="text text-btn">SEE ALL WORKS</div>
                              <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66542fc1af0a6b10acbba96f_redTriangle.svg" loading="lazy" style="-webkit-transform:translate3d(0.5rem, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(90deg) skew(0, 0);-moz-transform:translate3d(0.5rem, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(90deg) skew(0, 0);-ms-transform:translate3d(0.5rem, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(90deg) skew(0, 0);transform:translate3d(0.5rem, 0, 0) scale3d(1, 1, 1) rotateX(0) rotateY(0) rotateZ(90deg) skew(0, 0)" alt="" class="ourworks_scroll_text_arrow">
                           </div>
                        </div>
                     </a>
                  </div>
                  <div class="text ourworks_text2">It is bold, innovative and<br>unconventional approaches to reaching and engaging attention</div>
               </div>
               <div data-w-id="850c39cf-acef-380c-7931-57cd9a374942" class="home_works_counter">
                  <div class="home_works_counter_inner">
                     <div class="home_works_pagination_wrapper">
                        <div class="works_hero_pagination_small_line works_hero_pagination_small_line_first"></div>
                        <div class="works_hero_pagination_main_container">
                           <div class="home_works_pagination_main_line"></div>
                           <div class="home_works_pagination_main_circle"></div>
                           <div class="body home_works_pagination_main_text">01</div>
                        </div>
                        <div class="works_hero_pagination_small_line works_hero_pagination_small_line_first"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                     </div>
                     <div class="home_works_pagination_wrapper">
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_main_container">
                           <div class="home_works_pagination_main_line"></div>
                           <div class="home_works_pagination_main_circle"></div>
                           <div class="body home_works_pagination_main_text">02<br></div>
                        </div>
                        <div class="works_hero_pagination_small_line works_hero_pagination_small_line_first"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_small_line"></div>
                     </div>
                     <div class="home_works_pagination_wrapper">
                        <div class="works_hero_pagination_small_line"></div>
                        <div class="works_hero_pagination_main_container">
                           <div class="home_works_pagination_main_line"></div>
                           <div class="home_works_pagination_main_circle"></div>
                           <div class="body home_works_pagination_main_text">03<br></div>
                        </div>
                        <div class="works_hero_pagination_small_line works_hero_pagination_small_line_first"></div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
      </section>
      <section data-w-id="bfd27631-0ed4-78dc-99cb-002d33e4ab8d" class="moodboard">
         <div class="w-layout-vflex flex-block">
            <div data-scrumble-text="moodboard-title-mobile" data-w-id="bfd27631-0ed4-78dc-99cb-002d33e4ab8f" class="h5 h5-moodboard">MOODBOARD</div>
            <div data-w-id="2b084a7a-0466-9545-d5ae-6ae35a4afd5c" data-scrumble-progress="moodboard-title-mobile" data-scrumble-duration="300" data-scrumble-responsive="767" class="scrumble_progress"></div>
            <div class="w-layout-hflex horisontal-sticky"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ba0479cf20cbbf47_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202.jpg" loading="lazy" sizes="(max-width: 767px) 100vw, 60vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ba0479cf20cbbf47_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ba0479cf20cbbf47_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ba0479cf20cbbf47_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202.jpg" alt="PANTOPHOBIA STUDIO photography" class="moodboard-img"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ed9b579c055e6e9b_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(1).jpg" loading="lazy" sizes="(max-width: 767px) 100vw, 60vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ed9b579c055e6e9b_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(1)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ed9b579c055e6e9b_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(1)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834ed9b579c055e6e9b_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(1).jpg" alt="PANTOPHOBIA STUDIO photography" class="moodboard-img"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664168d5230eb85b81817fa8_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(4)%20(1).jpg" loading="lazy" sizes="(max-width: 767px) 100vw, 60vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664168d5230eb85b81817fa8_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(4)%20(1)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664168d5230eb85b81817fa8_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(4)%20(1)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664168d5230eb85b81817fa8_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(4)%20(1).jpg" alt="PANTOPHOBIA STUDIO photography" class="moodboard-img"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834555a5bea84fea53f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(2).jpg" loading="lazy" sizes="(max-width: 767px) 100vw, 60vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834555a5bea84fea53f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(2)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834555a5bea84fea53f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(2)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834555a5bea84fea53f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(2).jpg" alt="PANTOPHOBIA STUDIO photography" class="moodboard-img"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834859bd84e0530e66f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(3).jpg" loading="lazy" sizes="(max-width: 767px) 100vw, 60vw" srcset="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834859bd84e0530e66f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(3)-p-500.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834859bd84e0530e66f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(3)-p-800.jpg,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66416834859bd84e0530e66f_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-20%20%D0%BE%2014.21%202%20(3).jpg" alt="PANTOPHOBIA STUDIO photography" class="moodboard-img"></div>
         </div>
      </section>
      <section data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002df" class="partners">
         <div class="partners_vid_container partners-vid">
            <div class="corners w-embed">
               <div class="corner-borders corner-borders--left"></div>
               <div class="corner-borders corner-borders--right"></div>
            </div>
            <div data-poster-url="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66adb32efcf06834d7acab91_our-clients-video_JBuGCJY4-poster-00001.jpg" data-video-urls="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66adb32efcf06834d7acab91_our-clients-video_JBuGCJY4-transcode.mp4,https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66adb32efcf06834d7acab91_our-clients-video_JBuGCJY4-transcode.webm" data-autoplay="true" data-loop="true" data-wf-ignore="true" class="background-video-3 w-background-video w-background-video-atom">
               <video id="f24ace2f-49f1-c183-961e-d4ef9c4002e5-video" autoplay="" loop="" style="background-image:url(&quot;https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66adb32efcf06834d7acab91_our-clients-video_JBuGCJY4-poster-00001.jpg&quot;)" muted="" playsinline="" data-wf-ignore="true" data-object-fit="cover">
                  <source src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66adb32efcf06834d7acab91_our-clients-video_JBuGCJY4-transcode.mp4" data-wf-ignore="true">
                  <source src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3%2F66adb32efcf06834d7acab91_our-clients-video_JBuGCJY4-transcode.webm" data-wf-ignore="true">
               </video>
            </div>
         </div>
         <div class="partners-title">
            <div class="text-block-2 partners-heading">OUR<br>PARTNERS</div>
            <div data-scrumble-text="our-partners-mobile-title" data-w-id="e7b918c4-7f2e-f8df-43c5-e24ab044f98a" class="partners-heading-mobile">OUR PARTNERS</div>
            <div data-w-id="cb931dfd-14c1-c8db-bb71-fb4ab4ed239c" data-scrumble-progress="our-partners-mobile-title" data-scrumble-duration="300" data-scrumble-responsive="478" class="scrumble_progress"></div>
            <div data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002e7" class="text partner-title-text">Our visual is a type of marketing strategy that pushes boundaries and takes risks.</div>
         </div>
         <div class="partners-row">
            <a href="https://www.bmw.com/" target="_blank" class="partner-block w-inline-block">
               <div data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002eb" data-is-ix2-target="1" class="hover-lottie bmw" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66a2494e7c8fe76f569b502a_bmw_25.07.lottie" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="2.6666666666666665" data-duration="0"></div>
            </a>
            <a href="https://numero.com/" target="_blank" class="partner-block w-inline-block">
               <div data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002ed" data-is-ix2-target="1" class="hover-lottie" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66a35ef9974b4cdaebade128_Numero_26.07.lottie" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="3.5" data-duration="0"></div>
            </a>
            <a href="https://www.loreal.com/" target="_blank" class="partner-block w-inline-block">
               <div data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002ef" data-is-ix2-target="1" class="hover-lottie" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66a383056b00d7f4ef1a5619_Loreal_26.07_v2.lottie" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="3.033333333333333" data-duration="0"></div>
            </a>
            <a href="https://www.nike.com/" target="_blank" class="partner-block w-inline-block">
               <div data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002f1" data-is-ix2-target="1" class="hover-lottie nike" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66a260f842739b7c8679d3b5_Nike_25.07_v2.lottie" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="2.2" data-duration="0"></div>
            </a>
            <a href="https://unifi3d.co/" target="_blank" class="partner-block w-inline-block">
               <div data-w-id="f24ace2f-49f1-c183-961e-d4ef9c4002f3" data-is-ix2-target="1" class="hover-lottie hover2" data-animation-type="lottie" data-src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66a1fe437c0c976e41e5853c_UNIFi3D_logo_lottie.lottie" data-loop="0" data-direction="1" data-autoplay="0" data-renderer="svg" data-default-duration="1.5333333333333334" data-duration="0"></div>
            </a>
         </div>
      </section>
      <div class="cookie_popup">
         <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664d9fda151ffca6c2cf0b13_cookie.svg" loading="lazy" alt="" class="cookie_popup_image">
         <div class="body cookie_popup_text"><strong class="cookie_popup_text_bold">Our website use cookies. </strong><br>By continuing navigating, we assume your permission to deploy cookies as detailed in our Privacy Policy.</div>
         <div class="corners_button_wrapper corner_border corner_border_small">
            <a href="#" class="corners_button w-button">Accept Cookies</a>
            <div class="corners_button_frame">
               <div class="corners w-embed">
                  <div class="corner-borders corner-borders--left"></div>
                  <div class="corner-borders corner-borders--right"></div>
               </div>
            </div>
         </div>
         <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664ca31c4ea90de4ae377776_Burger%20menu.svg" loading="lazy" alt="" class="cookie_popup_close_icon">
      </div>
      <section id="footer" data-w-id="bbca02f9-a4de-f61f-986a-695c6291c660" class="footer">
         <div class="w-layout-hflex footer_top_row">
            <div class="w-layout-vflex footer_nav"><a data-w-id="bbca02f9-a4de-f61f-986a-695c6291c663" href="index.htm" aria-current="page" class="text text-btn link w--current">HOME</a><a data-w-id="bbca02f9-a4de-f61f-986a-695c6291c665" href="works.html" class="text text-btn link">WORKS</a><a data-w-id="bbca02f9-a4de-f61f-986a-695c6291c667" href="about-us.html" class="text text-btn link">ABOUT</a><a data-w-id="bbca02f9-a4de-f61f-986a-695c6291c669" href="privacy-policy.html" class="text text-btn link">PRIVACY POLICY</a></div>
            <div class="footer_caption">
               <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c66c" class="text">Join us on a journey <br>to the unknown</div>
               <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c670">
                  <div class="text">Email us</div>
                  <a href="mailto:blns@PANTOPHOBIA STUDIO?subject=Connecting%20with%20PANTOPHOBIA STUDIO" class="text link">blns@PANTOPHOBIA STUDIO</a>
               </div>
            </div>
         </div>
         <div class="marquee-horizontal">
            <div class="marquee-horizontal-css w-embed">
               <style>
                  .track-horizontal {
                  position: absolute;
                  white-space: nowrap;
                  will-change: transform;
                  animation: marquee-horizontal 24s linear infinite;
                  /* manipulate the speed of the marquee by changing "40s" line above*/
                  }
                  @keyframes marquee-horizontal {
                  from { transform: translateX(0); }
                  to { transform: translateX(-50%); }
                  }
               </style>
            </div>
            <div class="track-horizontal">
               <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c678" class="marquee-inner"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/663293f8327cd9cf0de43776_Text%20(2)%20(1).svg" loading="eager" width="Auto" height="147" alt="" class="footer-en"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/663293f8327cd9cf0de43776_Text%20(2)%20(1).svg" loading="eager" width="Auto" height="147" alt="" class="footer-en"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/663293f8327cd9cf0de43776_Text%20(2)%20(1).svg" loading="eager" width="Auto" height="147" alt="" class="footer-en"></div>
            </div>
         </div>
         <div class="marquee-horizontal-2">
            <div class="marquee-horizontal-alt-css w-embed">
               <style>
                  .track-horizontal-alt {
                  position: absolute;
                  white-space: nowrap;
                  will-change: transform;
                  animation: marquee-horizontal-alt 24s linear infinite;
                  /* manipulate the speed of the marquee by changing "40s" line above*/
                  }
                  @keyframes marquee-horizontal-alt {
                  from { transform: translateX(-50%); }
                  to { transform: translateX(0%); }
                  }
               </style>
            </div>
            <div class="track-horizontal-alt">
               <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c67f" class="marquee-inner"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66329308f5413d44b783d77b_footerCn%20(1).svg" loading="lazy" alt="" class="marquee-text"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66329308f5413d44b783d77b_footerCn%20(1).svg" loading="eager" alt="" class="marquee-text"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66329308f5413d44b783d77b_footerCn%20(1).svg" loading="lazy" alt="" class="marquee-text"></div>
            </div>
         </div>
         <div class="w-layout-vflex footer_mobile_qr_container">
            <div class="h6 footer-heading">contact us</div>
            <div class="footer_qr_code_wrapper footer_mobile_qr_popup">
               <div class="corners w-embed">
                  <div class="corner-borders corner-borders--left"></div>
                  <div class="corner-borders corner-borders--right"></div>
               </div>
               <div class="text text-btn">WECHAT</div>
               <div data-w-id="542708c0-147c-46b4-7958-38e98503d5e5" class="footer_popup_wrapper">
                  <div data-w-id="1542ec49-ce80-e56b-ab26-02c751e2bec9" class="footer_popup_bg"></div>
                  <div data-w-id="6d270b16-f116-aa07-02c3-a32b96c6c69d" class="footer_popup corner_border corner_border_wide">
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664ca31c4ea90de4ae377776_Burger%20menu.svg" loading="lazy" data-w-id="da78e5f4-05fb-1d2b-624c-bd7caf2895c7" alt="" class="footer_popup_close_icon">
                     <h4 class="footer_popup_title">WECHAT</h4>
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664260dbd74eb0cd81a234e6_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-06%20%D0%BE%2013.20%205.jpg" loading="lazy" alt="WECHAT BALANS STUDIO" class="footer_popup_image">
                     <div class="footer_popup_text body">Scan the qr code and add us to Wechat</div>
                     <div class="corners w-embed">
                        <div class="corner-borders corner-borders--left"></div>
                        <div class="corner-borders corner-borders--right"></div>
                     </div>
                  </div>
               </div>
            </div>
            <div class="footer_qr_code_wrapper footer_mobile_qr_popup">
               <div class="corners w-embed">
                  <div class="corner-borders corner-borders--left"></div>
                  <div class="corner-borders corner-borders--right"></div>
               </div>
               <div class="text text-btn">TELEGRAM</div>
               <div data-w-id="542708c0-147c-46b4-7958-38e98503d5e5" class="footer_popup_wrapper">
                  <div data-w-id="1542ec49-ce80-e56b-ab26-02c751e2bec9" class="footer_popup_bg"></div>
                  <div data-w-id="6d270b16-f116-aa07-02c3-a32b96c6c69d" class="footer_popup corner_border corner_border_wide">
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664ca31c4ea90de4ae377776_Burger%20menu.svg" loading="lazy" data-w-id="da78e5f4-05fb-1d2b-624c-bd7caf2895c7" alt="" class="footer_popup_close_icon">
                     <h4 class="footer_popup_title">Telegram</h4>
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664260dbd74eb0cd81a234e6_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-06%20%D0%BE%2013.20%205.jpg" loading="lazy" alt="WECHAT BALANS STUDIO" class="footer_popup_image">
                     <div class="footer_popup_text body">Scan the qr code and write to us in Telegram</div>
                     <div class="corners w-embed">
                        <div class="corner-borders corner-borders--left"></div>
                        <div class="corner-borders corner-borders--right"></div>
                     </div>
                  </div>
               </div>
            </div>
         </div>
         <div class="w-layout-hflex footer_bottom_row">
            <div class="w-layout-vflex footer_links footer_qrcodes">
               <div class="h6">ADD US TO WECHAT OR TELEGRAM</div>
               <div class="w-layout-hflex qr_codes_footer">
                  <div class="footer_qr_code_wrapper">
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664260dbd74eb0cd81a234e6_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-06%20%D0%BE%2013.20%205.jpg" loading="lazy" alt="PANTOPHOBIA STUDIO wechat qr code" class="qr_footer">
                     <div data-w-id="542708c0-147c-46b4-7958-38e98503d5e5" class="footer_popup_wrapper">
                        <div data-w-id="1542ec49-ce80-e56b-ab26-02c751e2bec9" class="footer_popup_bg"></div>
                        <div data-w-id="6d270b16-f116-aa07-02c3-a32b96c6c69d" class="footer_popup corner_border corner_border_wide">
                           <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664ca31c4ea90de4ae377776_Burger%20menu.svg" loading="lazy" data-w-id="da78e5f4-05fb-1d2b-624c-bd7caf2895c7" alt="" class="footer_popup_close_icon">
                           <h4 class="footer_popup_title">WECHAT</h4>
                           <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664260dbd74eb0cd81a234e6_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-06%20%D0%BE%2013.20%205.jpg" loading="lazy" alt="WECHAT BALANS STUDIO" class="footer_popup_image">
                           <div class="footer_popup_text body">Scan the qr code and add us to Wechat</div>
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="footer_qr_code_wrapper">
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664260dbe33f172e50a8eb3b_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-06%20%D0%BE%2013.20%205%20(1).jpg" loading="lazy" alt="PANTOPHOBIA STUDIO telegram qr code" class="qr_footer">
                     <div data-w-id="542708c0-147c-46b4-7958-38e98503d5e5" class="footer_popup_wrapper">
                        <div data-w-id="1542ec49-ce80-e56b-ab26-02c751e2bec9" class="footer_popup_bg"></div>
                        <div data-w-id="6d270b16-f116-aa07-02c3-a32b96c6c69d" class="footer_popup corner_border corner_border_wide">
                           <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664ca31c4ea90de4ae377776_Burger%20menu.svg" loading="lazy" data-w-id="da78e5f4-05fb-1d2b-624c-bd7caf2895c7" alt="" class="footer_popup_close_icon">
                           <h4 class="footer_popup_title">Telegram</h4>
                           <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664260dbd74eb0cd81a234e6_%D0%97%D0%BD%D1%96%D0%BC%D0%BE%D0%BA%20%D0%B5%D0%BA%D1%80%D0%B0%D0%BD%D0%B0%202023-02-06%20%D0%BE%2013.20%205.jpg" loading="lazy" alt="WECHAT BALANS STUDIO" class="footer_popup_image">
                           <div class="footer_popup_text body">Scan the qr code and write to us in Telegram</div>
                           <div class="corners w-embed">
                              <div class="corner-borders corner-borders--left"></div>
                              <div class="corner-borders corner-borders--right"></div>
                           </div>
                        </div>
                     </div>
                  </div>
               </div>
            </div>
            <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c68a" class="w-layout-vflex footer_links">
               <div class="w-layout-vflex social_links social_links_location">
                  <div class="h6 footer-heading">LOCATION</div>
                  <div class="text address">JinXiu lu, 225-11-1622, Shanghai, PRC</div>
               </div>
               <div class="lynksen_container">
                  <div class="lynksencaption">Crafted by</div>
                  <a data-w-id="d3db7e91-f04e-c179-9cec-c88e4a34a3b4" href="https://www.lynksen.com/" target="_blank" class="lynksen_link_container w-inline-block">
                     <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66b25771e768027c602edd40_white%20horizontal.svg" loading="lazy" width="76" alt="Lynksen Logo">
                     <div class="redline"></div>
                  </a>
               </div>
               <div class="w-layout-vflex social_links">
                  <div class="socia_media_links">
                     <div class="h6 footer-heading">FOLLOW US</div>
                     <a href="https://www.instagram.com/headhotter/" target="_blank" class="link-block-3 w-inline-block">
                        <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c692" class="w-layout-hflex footer_social_link">
                           <div class="text text-btn footer_social_link_text">INSTAGRAM</div>
                           <div class="footer_social_link_icon w-embed">
                              <svg viewbox="0 0 10 11" fill="none" xmlns="http://www.w3.org/2000/svg">
                                 <path d="M9.98528 1.25739C9.98528 0.981252 9.76142 0.757394 9.48528 0.757394L4.98528 0.757395C4.70914 0.757394 4.48528 0.981252 4.48528 1.25739C4.48528 1.53354 4.70914 1.75739 4.98528 1.75739L8.98528 1.75739L8.98528 5.75739C8.98528 6.03354 9.20914 6.25739 9.48528 6.25739C9.76142 6.2574 9.98528 6.03354 9.98528 5.75739L9.98528 1.25739ZM1.35355 10.0962L9.83883 1.61095L9.13173 0.903841L0.646447 9.38912L1.35355 10.0962Z" fill="CurrentColor"></path>
                              </svg>
                           </div>
                        </div>
                     </a>
                     <a href="https://vimeo.com/kaunas" target="_blank" class="link-block-3 w-inline-block">
                        <div data-w-id="bbca02f9-a4de-f61f-986a-695c6291c696" class="w-layout-hflex footer_social_link">
                           <div class="text text-btn footer_social_link_text">VIMEO</div>
                           <div class="footer_social_link_icon w-embed">
                              <svg viewbox="0 0 10 11" fill="none" xmlns="http://www.w3.org/2000/svg">
                                 <path d="M9.98528 1.25739C9.98528 0.981252 9.76142 0.757394 9.48528 0.757394L4.98528 0.757395C4.70914 0.757394 4.48528 0.981252 4.48528 1.25739C4.48528 1.53354 4.70914 1.75739 4.98528 1.75739L8.98528 1.75739L8.98528 5.75739C8.98528 6.03354 9.20914 6.25739 9.48528 6.25739C9.76142 6.2574 9.98528 6.03354 9.98528 5.75739L9.98528 1.25739ZM1.35355 10.0962L9.83883 1.61095L9.13173 0.903841L0.646447 9.38912L1.35355 10.0962Z" fill="CurrentColor"></path>
                              </svg>
                           </div>
                        </div>
                     </a>
                  </div>
                  <div class="social_media_icons">
                     <div class="h6 footer-heading">FOLLOW US</div>
                     <div class="w-layout-hflex social_media_icons_row"><a href="https://www.instagram.com/headhotter/" class="social_icon w-inline-block"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664e6434143dacaf4812e1d5_Mask%20group.png" loading="lazy" alt="INSTAGRAM BALANS"></a><a href="https://vimeo.com/kaunas" class="social_icon w-inline-block"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/664e6434f5883e774f63dc96_Mask%20group-1.png" loading="lazy" alt="VIMEO BALANS"></a></div>
                  </div>
               </div>
            </div>
         </div>
         <div class="footer_back_top_container">
            <div class="footer_back_top_text">back to the top</div>
            <img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66542fc1af0a6b10acbba96f_redTriangle.svg" loading="lazy" alt="" class="footer_back_top_icon">
            <div class="footer_styles w-embed">
               <style>
                  .footer_back_top_container:hover .footer_back_top_icon {
                  transform: translateY(-0.2svw);
                  }
               </style>
            </div>
         </div>
         <div class="lynksen_container_mobile">
            <div class="lynksencaption">Website crafted by</div>
            <a href="https://www.lynksen.com/" target="_blank" class="lynksen_link_container w-inline-block"><img src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/66b25771e768027c602edd40_white%20horizontal.svg" loading="lazy" width="80" alt="Lynksen Logo"></a>
         </div>
      </section>
      <div class="imagedistortion w-embed w-script">
         <style>
            .distortion canvas {
            width: 100% !important;
            height: 100% !important;
            }
         </style>
         <script defer="" type="module">
            import {
                Curtains,
                Plane,
                Vec2,
                Vec3,
                PingPongPlane,
                ShaderPass,
                FXAAPass,
                Texture,
            } from "https://cdn.jsdelivr.net/npm/curtainsjs@8.1.6/+esm";
            
            const vs = `
            precision mediump float;
            
            // default mandatory variables
            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;
            
            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;
            
            uniform mat4 planeTextureMatrix;
            
            // custom variables
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            uniform vec2 uMousePosition;
            uniform float uTime;
            uniform float uTransition;
            uniform float uAspect;
            
            void main() {
             vec3 vertexPosition = aVertexPosition;
            
             // convert uTransition from [0,1] to [0,1,0]
             float transition = 1.0 - abs((uTransition * 2.0) - 1.0);
            
             //vertexPosition.x *= (1. + transition * 2.25);
            
             // get the distance between our vertex and the mouse position
             float distanceFromMouse = distance(uMousePosition, vec2(vertexPosition.x, vertexPosition.y));
            
             // calculate our wave effect
             float waveSinusoid = cos(5.0 * (distanceFromMouse - (uTime / 30.0)));
            
             // attenuate the effect based on mouse distance
             float distanceStrength = (0.4 / (distanceFromMouse + 0.4));
            
             // calculate our distortion effect
             float distortionEffect = distanceStrength * waveSinusoid * 0.33;
            
             // apply it to our vertex position
             vertexPosition.z +=  distortionEffect * -transition;
             vertexPosition.x +=  (distortionEffect * transition * (uMousePosition.x - vertexPosition.x));
             vertexPosition.y +=  distortionEffect * transition * (uMousePosition.y - vertexPosition.y);
            
             gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);
            
             // varyings
             vVertexPosition = vertexPosition;
             vTextureCoord = (planeTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
            }
            `;
            
            const fs = `
                 precision mediump float;
            
                 varying vec3 vVertexPosition;
                 varying vec2 vTextureCoord;
            
                 uniform sampler2D planeTexture;
                 uniform float uAspect;
            
                 void main( void ) {
                   // apply our texture
                   vec4 finalColor = texture2D(planeTexture, vTextureCoord);
            
                   // fake shadows based on vertex position along Z axis
                   finalColor.rgb += clamp(vVertexPosition.z, -1.0, 0.0) * 0.75;
                   // fake lights based on vertex position along Z axis
                   finalColor.rgb += clamp(vVertexPosition.z, 0.0, 1.0) * 0.75;
            
                   // just display our texture
                   gl_FragColor = finalColor;
                 }
            `;
            
            // now use the texture of our ping pong plane in the plane that will actually be displayed
            // displacement shaders
            const displacementVs = `
                 #ifdef GL_FRAGMENT_PRECISION_HIGH
                 precision highp float;
                 #else
                 precision mediump float;
                 #endif
            
                 // default mandatory variables
                 attribute vec3 aVertexPosition;
                 attribute vec2 aTextureCoord;
            
                 // custom variables
                 varying vec3 vVertexPosition;
                 varying vec2 vTextureCoord;
            
                 void main() {
                   gl_Position = vec4(aVertexPosition, 1.0);
            
                   // set the varyings
                   vTextureCoord = aTextureCoord;
                   vVertexPosition = aVertexPosition;
                 }
             `;
            
            const displacementFs = `
                 #ifdef GL_FRAGMENT_PRECISION_HIGH
                 precision highp float;
                 #else
                 precision mediump float;
                 #endif
            
                 // get our varyings
                 varying vec3 vVertexPosition;
                 varying vec2 vTextureCoord;
            
                 // our render texture
                 uniform sampler2D uRenderTexture;
                 uniform sampler2D uFlowTexture;
            
                 void main() {
                   // our flowmap
                   vec4 flowTexture = texture2D(uFlowTexture, vTextureCoord);
            
                   // distort our image texture based on the flowmap values
                   vec2 distortedCoords = vTextureCoord;
                   distortedCoords -= flowTexture.xy * 0.15;
            
                   // get our final texture based on the displaced coords
                   vec4 texture = texture2D(uRenderTexture, distortedCoords);
            
                   vec4 rTexture = texture2D(uRenderTexture, distortedCoords + flowTexture.xy * 0.025);
                   vec4 gTexture = texture2D(uRenderTexture, distortedCoords);
                   vec4 bTexture = texture2D(uRenderTexture, distortedCoords - flowTexture.xy * 0.025);
            
                   // mix the BW image and the colored one based on our flowmap color values
                   float mixValue = clamp((abs(flowTexture.r) + abs(flowTexture.g) + abs(flowTexture.b)) * 3.5, 0.0, 1.0);
            
                   texture = mix(texture, vec4(rTexture.r, gTexture.g, bTexture.b, texture.a), mixValue);
            
                   gl_FragColor = texture;
                 }
             `;
            
            // creating our PingPongPlane flowmap plane
            // flowmap shaders
            const flowmapVs = `
                 // #ifdef GL_FRAGMENT_PRECISION_HIGH
                 precision highp float;
                 // #else
                 // precision mediump float;
                 // #endif
            
                 // default mandatory variables
                 attribute vec3 aVertexPosition;
                 attribute vec2 aTextureCoord;
            
                 uniform mat4 uMVMatrix;
                 uniform mat4 uPMatrix;
            
                 // custom variables
                 varying vec3 vVertexPosition;
                 varying vec2 vTextureCoord;
            
                 void main() {
                   vec3 vertexPosition = aVertexPosition;
            
                   gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);
            
                   // varyings
                   vTextureCoord = aTextureCoord;
                   vVertexPosition = vertexPosition;
                 }
             `;
            
            const flowmapFs = `
                 #ifdef GL_FRAGMENT_PRECISION_HIGH
                 precision highp float;
                 #else
                 precision mediump float;
                 #endif
            
                 varying vec3 vVertexPosition;
                 varying vec2 vTextureCoord;
            
                 uniform sampler2D uFlowMap;
            
                 uniform vec2 uMousePosition;
                 uniform float uFalloff;
                 uniform float uAlpha;
                 uniform float uDissipation;
                 uniform float uScrollDiff;
                 uniform vec2 uVelocity;
                 uniform float uAspect;
                 uniform float uScrollDirection;
                 uniform bool uHorizontal;
                 uniform vec2 uFakeMousePosition;
                 uniform vec2 uFakeVelocity;
            
                 void main() {
                   vec2 textCoords = vTextureCoord;
                   vec2 mousePos = uMousePosition;
                   float falloffAdjust = 0.0;
                   vec2 velocity = uVelocity;
            
                   vec4 color = texture2D(uFlowMap, textCoords) * uDissipation;
                   // vec4 color = vec4(0.0, 0.0, 0.0, 1.0) * uDissipation;
                   float f = uFalloff;
                   if(abs(uScrollDiff) > 0.1) {
                    mousePos = uFakeMousePosition;
                    velocity = uFakeVelocity;
                    if(uHorizontal) {
                        // swap x and y
                        mousePos = vec2(mousePos.y, mousePos.x);
                        velocity = vec2(velocity.y, velocity.x);
                    } 
                    f *= max(1.0, abs(uScrollDiff * 1.5));
                   }
            
                   vec2 mouseTexPos = (mousePos + 1.0) * 0.5;
                   vec2 cursor = vTextureCoord - mouseTexPos;
            
                   vec3 stamp = vec3(velocity * vec2(1.0, -1.0), 1.0 - pow(1.0 - min(1.0, length(velocity)), 3.0));
                   // stamp+=uScrollDiff*0.2;
                   float falloff = smoothstep(f + falloffAdjust, 0.0, length(cursor)) * uAlpha;
                   color.rgb = mix(color.rgb, stamp, vec3(falloff));
            
                   gl_FragColor = color;
                 }
             `;
            
            const checkWebGLSupport = () => {
                try {
                    var canvas = document.createElement("canvas");
                    return (
                        !!window.WebGLRenderingContext &&
                        (canvas.getContext("webgl") || canvas.getContext("experimental-webgl"))
                    );
                } catch (e) {
                    return false;
                }
            };
            
            function pickSrcFromSrcset(srcset) {
                const sources = srcset.split(",").map(function (src) {
                    try {
                        let [url, width] = src.trim().split(" ");
                        return { url: url.trim(), width: parseInt(width, 10) };
                    } catch {
                        return { url: "", width: "" };
                    }
                });
            
                // Sort sources by width in ascending order
                sources.sort(function (a, b) {
                    return a.width - b.width;
                });
            
                // Retrieve the width of the viewport
                const viewportWidth = window.innerWidth || document.documentElement.clientWidth;
            
                // Find an appropriate source
                let selectedSource = sources[sources.length - 1].url; // Default to the largest size
            
                for (let i = 0; i < sources.length; i++) {
                    if (viewportWidth <= sources[i].width) {
                        selectedSource = sources[i].url;
                        break;
                    }
                }
            
                return selectedSource;
            }
            
            document.addEventListener("DOMContentLoaded", async () => {
                let flowMaps = [];
            
                // on tablet and mobile, we will display the original images
                if (window.innerWidth < 992) {
                    return;
                }
                // check if device support webgl
                if (!checkWebGLSupport()) {
                    return;
                }
            
                // find all our planes
                const planeImgElements = document.querySelectorAll("img[data-distortion='single']");
            
                const waitImageLoaded = img => {
                    return new Promise((resolve, reject) => {
                        if (img.complete) {
                            resolve(true);
                        } else {
                            img.addEventListener("load", () => {
                                resolve(true);
                            });
                            img.addEventListener("error", () => {
                                reject(false);
                            });
                        }
                    });
                };
            
                for (let i = 0; i < planeImgElements.length; i++) {
                    const imgElem = planeImgElements[i];
                    const isHorizontal = imgElem.getAttribute("data-direction") === "horizontal";
                    imgElem.id = "img-" + i;
                    let curtains = null;
            
                    const isLoaded = await waitImageLoaded(imgElem);
                    if (!isLoaded) continue;
            
                    let imageWidth = imgElem.clientWidth;
                    let nIHeight = imgElem.naturalHeight;
                    let nIWidth = imgElem.naturalWidth;
                    let aspectRatio = nIWidth / nIHeight;
                    let imageHeight = imageWidth / aspectRatio;
                    if (!imageHeight) continue;
                    let flowMap = null;
            
                    // get the parent container
                    const containerElem = imgElem.parentElement;
            
                    // id for rendering loop
                    let rafId = null;
            
                    // use request animation frame to render our scene
                    function render() {
                        if (rafId) {
                            cancelAnimationFrame(rafId);
                        }
                        curtains.render();
            
                        rafId = requestAnimationFrame(render);
                    }
            
                    let isFirstObservation = true;
            
                    // handle intersection observer
                    const observer = new IntersectionObserver(
                        entries => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    if (isFirstObservation) {
                                        isFirstObservation = false;
                                        imageHeight = imgElem.clientHeight;
                                        imageWidth = imgElem.clientWidth;
                                        // initialize our scene
                                        initDistortion();
                                        render();
                                        return;
                                    }
            
                                    // if the element is in the viewport, start rendering
                                    render();
                                } else {
                                    // if the element is not in the viewport, stop rendering
                                    cancelAnimationFrame(rafId);
                                }
                            });
                        },
                        {
                            root: null,
                            rootMargin: "0px",
                            threshold: 0,
                        }
                    );
                    // run render function only when the element is in the viewport
                    observer.observe(imgElem);
            
                    async function initDistortion() {
                        // create wrapper for canvas and wrapper planes
                        const distortionWrapper = document.createElement("div");
                        distortionWrapper.style.position = "relative";
                        distortionWrapper.style.width = "fit-content";
                        distortionWrapper.style.height = "fit-content";
                        distortionWrapper.style.overflow = "hidden";
            
                        // create canvas
                        const canvas = document.createElement("div");
                        canvas.id = "canvas-" + i;
                        canvas.style.width = "100%";
                        canvas.style.height = "100%";
                        canvas.style.position = "absolute";
                        canvas.style.top = "0";
                        canvas.style.left = "0";
            
                        // set sampler attribute for curtains js lib
                        imgElem.dataset.sampler = "planeTexture";
                        // pick the image src from the data-srcset attribute
                        const srcset = imgElem.getAttribute("srcset");
                        const src = srcset ? pickSrcFromSrcset(srcset) : imgElem.src;
                        imgElem.src = src;
                        const planeWrapperElem = document.createElement("div");
                        planeWrapperElem.style.position = "relative";
            
                        // create a div element that will wrap our image
                        const planeElem = document.createElement("div");
                        planeElem.classList.add("plane");
                        planeElem.style.position = "absolute";
                        planeElem.style.top = "0";
                        planeElem.style.right = "0";
                        planeElem.style.bottom = "0";
                        planeElem.style.left = "0";
                        planeElem.style.width = "100%";
                        planeElem.style.height = "100%";
            
                        planeElem.appendChild(imgElem);
                        planeWrapperElem.appendChild(planeElem);
                        distortionWrapper.appendChild(planeWrapperElem);
                        distortionWrapper.appendChild(canvas);
                        containerElem.appendChild(distortionWrapper);
            
                        // remove observation from img and set to distortionWrapper
                        observer.unobserve(imgElem);
                        observer.observe(distortionWrapper);
            
                        // planeWrapperElem.style.width = imageWidth + "px";
                        // planeWrapperElem.style.height = imageHeight + "px";
            
                        const convertPxToVw = px => {
                            return (px / window.innerWidth) * 100;
                        };
                        const convertPxToVh = px => {
                            return (px / window.innerHeight) * 100;
                        };
            
                        planeWrapperElem.style.width = convertPxToVw(imageWidth) + "vw";
                        planeWrapperElem.style.height = convertPxToVh(imageHeight) + "vh";
            
                        // set up our WebGL context and append the canvas to our wrapper
                        curtains = new Curtains({
                            container: "canvas-" + i,
                            pixelRatio: Math.min(1.5, window.devicePixelRatio), // limit pixel ratio for performance
                            autoRender: false,
                            production: true,
                        });
            
                        // apply new style for img
                        imgElem.style.display = "none";
                        imgElem.style.objectFit = "contain";
                        distortionWrapper.classList.add("distortion");
            
                        curtains
                            .onScroll(() => {
                                applyPlanesParallax(planeCjs);
                            })
                            .onError(() => {
                                // we will add a class to the document body to display original images
                                document.body.classList.add("no-curtains", "planes-loaded");
                            })
                            .onContextLost(() => {
                                // on context lost, try to restore the context
                                curtains.restoreContext();
                            });
            
                        const mouse = new Vec2();
                        const lastMouse = mouse.clone();
                        const velocity = new Vec2();
            
                        const bbox = curtains.getBoundingRect();
            
                        const params = {
                            vertexShader: vs,
                            fragmentShader: fs,
                            widthSegments: 20,
                            heightSegments: 20,
                            uniforms: {
                                time: {
                                    name: "uTime",
                                    type: "1f",
                                    value: 0,
                                },
                                mousePosition: {
                                    name: "uMousePosition",
                                    type: "2f",
                                    value: mouse,
                                },
                                aspect: {
                                    name: "uAspect",
                                    type: "1f",
                                    value: bbox.width / bbox.height,
                                },
                            },
                        };
                        // create our plane
            
                        const handlePlane = plane => {
                            plane
                                .onAfterResize(() => {
                                    applyPlanesParallax(plane);
                                    // remove plane
                                    plane.remove();
                                    planeCjs = null;
            
                                    // create a new plane
                                    planeCjs = new Plane(curtains, planeElem, params);
                                    handlePlane(planeCjs);
                                })
                                .onRender(() => {
                                    plane.uniforms.time.value++;
                                });
                        };
            
                        let planeCjs = new Plane(curtains, planeElem, params);
                        handlePlane(planeCjs);
            
                        function applyPlanesParallax(plane) {
                            plane._translation.y = 0;
                        }
            
                        /*** POST PROCESSING ***/
                        // we'll be adding a flowmap rgb shift effect and fxaapass
            
                        // mouse/touch move
                        function onMouseMove(e) {
                            // velocity is our mouse position minus our mouse last position
                            lastMouse.copy(mouse);
            
                            // touch event
                            if (e.targetTouches) {
                                mouse.set(e.targetTouches[0].offsetX, e.targetTouches[0].offsetY);
                            }
                            // mouse event
                            else {
                                mouse.set(e.offsetX, e.offsetY);
                            }
            
                            // divided by a frame duration (roughly)
                            velocity.set(
                                (mouse.x - lastMouse.x) * 0.1,
                                (mouse.y - lastMouse.y) * 0.1
                            );
            
                            // we should update the velocity
                            updateVelocity = true;
                        }
            
                        distortionWrapper.addEventListener("mousemove", onMouseMove);
                        distortionWrapper.addEventListener("touchmove", onMouseMove, {
                            passive: true,
                        });
            
                        // if we should update the velocity or not
                        let updateVelocity = false;
            
                        const planeBbox = planeCjs.getBoundingRect();
                        // note the use of half float texture and the custom sampler name used in our fragment shader
                        const flowMapParams = {
                            sampler: "uFlowMap",
                            vertexShader: flowmapVs,
                            fragmentShader: flowmapFs,
                            watchScroll: false, // position is fixed
                            texturesOptions: {
                                floatingPoint: "half-float", // use half float texture when possible
                            },
                            uniforms: {
                                mousePosition: {
                                    name: "uMousePosition",
                                    type: "2f",
                                    value: mouse,
                                },
                                // size of the cursor
                                fallOff: {
                                    name: "uFalloff",
                                    type: "1f",
                                    value:
                                        bbox.width > bbox.height
                                            ? bbox.width / 1000
                                            : bbox.height / 1000,
                                },
                                // alpha of the cursor
                                alpha: {
                                    name: "uAlpha",
                                    type: "1f",
                                    value: 1,
                                },
                                // how much the cursor must dissipate over time (ie trail length)
                                // closer to 1 = no dissipation
                                dissipation: {
                                    name: "uDissipation",
                                    type: "1f",
                                    value: 0.15,
                                },
                                // our velocity
                                velocity: {
                                    name: "uVelocity",
                                    type: "2f",
                                    value: velocity,
                                },
                                // window aspect ratio to draw a circle
                                aspect: {
                                    name: "uAspect",
                                    type: "1f",
                                    value: bbox.width / bbox.height,
                                },
                                scrollDiff: {
                                    name: "uScrollDiff",
                                    type: "1f",
                                    value: 0,
                                },
                                scrollDirection: {
                                    name: "uScrollDirection",
                                    type: "1f",
                                    value: 0,
                                },
                                horizontal: {
                                    name: "uHorizontal",
                                    type: "1f",
                                    value: isHorizontal ? 1 : 0,
                                },
                                fakeMousePosition: {
                                    name: "uFakeMousePosition",
                                    type: "2f",
                                    value: new Vec2(0, 0),
                                },
                                fakeVelocity: {
                                    name: "uFakeVelocity",
                                    type: "2f",
                                    value: new Vec2(0, 0),
                                },
                            },
                        };
            
                        // our ping pong plane
                        flowMap = new PingPongPlane(curtains, curtains.container, flowMapParams);
                        flowMaps.push(flowMap);
            
                        function mouseToPlaneCoords(mouse, canvasWidth, canvasHeight) {
                            // Normalize mouse coordinates to range [-1, 1]
                            const xClipSpace = (mouse.x / canvasWidth) * 2 - 1;
                            const yClipSpace = 1 - (mouse.y / canvasHeight) * 2;
            
                            return new Vec2(xClipSpace, yClipSpace);
                        }
            
                        flowMap
                            .onRender(() => {
                                // update mouse position
                                const mouseUv = mouseToPlaneCoords(mouse, bbox.width, bbox.height);
            
                                flowMap.uniforms.mousePosition.value = mouseUv;
            
                                // console.log("mouseUv", mouseUv);
            
                                // update velocity
                                if (!updateVelocity) {
                                    velocity.set(
                                        curtains.lerp(velocity.x, 0, 0.1),
                                        curtains.lerp(velocity.y, 0, 0.1)
                                    );
                                }
                                updateVelocity = false;
            
                                flowMap.uniforms.velocity.value = new Vec2(
                                    curtains.lerp(velocity.x, 0, 0.1),
                                    curtains.lerp(velocity.y, 0, 0.1)
                                );
                            })
                            .onAfterResize(() => {
                                // update our window aspect ratio uniform
                                const boundingRect = flowMap.getBoundingRect();
                                flowMap.uniforms.aspect.value =
                                    boundingRect.width / boundingRect.height;
                                flowMap.uniforms.fallOff.value =
                                    bbox.width > bbox.height
                                        ? bbox.width / 1000
                                        : bbox.height / 1000;
                            });
            
                        const passParams = {
                            vertexShader: displacementVs,
                            fragmentShader: displacementFs,
                            depth: false, // explicitly disable depth for the ripple effect to work
                        };
            
                        const shaderPass = new ShaderPass(curtains, passParams);
            
                        // create a texture that will hold our flowmap
                        const flowTexture = shaderPass.createTexture({
                            sampler: "uFlowTexture",
                            floatingPoint: "half-float",
                            fromTexture: flowMap.getTexture(), // set it based on our PingPongPlane flowmap plane's texture
                        });
            
                        // wait for our first pass and the flowmap to be ready
                        flowTexture.onSourceUploaded(() => {
                            const fxaaPass = new FXAAPass(curtains);
                        });
                    }
                }
            
                const lerp = (start, end, t) => {
                    return start * (1 - t) + end * t;
                };
                let deltaY = 0;
                let dir = 0;
                let fakeMouse = new Vec2(0, 0);
                let fakeVelocity = new Vec2(0, 0);
                // handle scroll
                /* const handleScroll = e => {
                    deltaY = lerp(deltaY, e.deltaY, 0.04).toFixed(5);
                    dir = deltaY > 0 ? 1 : -1;
                    console.log("deltaY", deltaY * 0.1);
            
                    if (dir === 1) {
                        // update fake vectors
                        fakeMouse.y = deltaY * 0.1 - 1.2;
                        fakeVelocity.y = deltaY * 0.5 - 1.2;
                    } else {
                        // update fake vectors
                        fakeMouse.y = deltaY * 0.1 + 1.2;
                        fakeVelocity.y = deltaY * 0.7 + 1.2;
                    }
            
                    fakeMouse.x = 0.1;
                    fakeVelocity.x = 0.1;
                }; */
            
                const raf = () => {
                    if (deltaY > 0) {
                        deltaY = lerp(deltaY, 0, 0.1);
                    } else {
                        deltaY = lerp(deltaY, 0, 0.1);
                    }
            
                    // update our flowmaps
                    flowMaps.forEach(flowMap => {
                        flowMap.uniforms.scrollDiff.value = deltaY;
                        flowMap.uniforms.scrollDirection.value = dir;
            
                        flowMap.uniforms.fakeMousePosition.value = fakeMouse;
                        flowMap.uniforms.fakeVelocity.value = fakeVelocity;
                    });
            
                    requestAnimationFrame(raf);
                };
                raf();
            
                //window.addEventListener("wheel", handleScroll);
            });
         </script>
      </div>
      <div class="sliderdistortion w-embed w-script">
         <script defer="" type="module">
            import {
                Curtains,
                Plane,
                Vec2,
                Vec3,
                PingPongPlane,
                ShaderPass,
                FXAAPass,
                Texture,
            } from "https://cdn.jsdelivr.net/npm/curtainsjs@8.1.6/+esm";
            
            const vs = `
            precision mediump float;
            
            // default mandatory variables
            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;
            
            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;
            
            uniform mat4 planeTextureMatrix;
            
            // custom variables
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            uniform vec2 uMousePosition;
            uniform float uTime;
            uniform float uTransition;
            uniform float uAspect;
            uniform float uScrollEffect;
            
            void main() {
            vec3 vertexPosition = aVertexPosition;
            
            // convert uTransition from [0,1] to [0,1,0]
            float transition = 1.0 - abs((uTransition * 2.0) - 1.0);
            
            //vertexPosition.x *= (1. + transition * 2.25);
            // cool effect on scroll
            vertexPosition.y += sin((vertexPosition.y / 1.5 + 1.0) * 3.141592) * (sin(uScrollEffect / 2000.0));
            
            // get the distance between our vertex and the mouse position
            float distanceFromMouse = distance(uMousePosition, vec2(vertexPosition.x, vertexPosition.y));
            
            // calculate our wave effect
            float waveSinusoid = cos(5.0 * (distanceFromMouse - (uTime / 30.0)));
            
            // attenuate the effect based on mouse distance
            float distanceStrength = (0.4 / (distanceFromMouse + 0.4));
            
            // calculate our distortion effect
            float distortionEffect = distanceStrength * waveSinusoid * 0.33;
            
            // apply it to our vertex position
            vertexPosition.z +=  distortionEffect * -transition;
            vertexPosition.x +=  (distortionEffect * transition * (uMousePosition.x - vertexPosition.x));
            vertexPosition.y +=  distortionEffect * transition * (uMousePosition.y - vertexPosition.y);
            
            gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);
            
            // varyings
            vVertexPosition = vertexPosition;
            vTextureCoord = (planeTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;
            }
            `;
            
            const fs = `
            precision mediump float;
            
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            uniform float uParallax;
            uniform float uScrollEffect;
            uniform sampler2D planeTexture;
            uniform float uAspect;
            
            void main( void ) {
            float scale = 0.8;
            float aspect = uAspect;
            // apply scale
            
            // apply our texture
            vec2 coords = vTextureCoord;
            vec4 finalColor = texture2D(planeTexture, coords);
            
            // fake shadows based on vertex position along Z axis
            finalColor.rgb += clamp(vVertexPosition.z, -1.0, 0.0) * 0.75;
            // fake lights based on vertex position along Z axis
            finalColor.rgb += clamp(vVertexPosition.z, 0.0, 1.0) * 0.75;
            
            // just display our texture
            gl_FragColor = finalColor;
            }
            `;
            
            // now use the texture of our ping pong plane in the plane that will actually be displayed
            // displacement shaders
            const displacementVs = `
            #ifdef GL_FRAGMENT_PRECISION_HIGH
            precision highp float;
            #else
            precision mediump float;
            #endif
            
            // default mandatory variables
            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;
            
            // custom variables
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            void main() {
            gl_Position = vec4(aVertexPosition, 1.0);
            
            // set the varyings
            vTextureCoord = aTextureCoord;
            vVertexPosition = aVertexPosition;
            }
            `;
            
            const displacementFs = `
            #ifdef GL_FRAGMENT_PRECISION_HIGH
            precision highp float;
            #else
            precision mediump float;
            #endif
            
            // get our varyings
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            // our render texture
            uniform sampler2D uRenderTexture;
            uniform sampler2D uFlowTexture;
            
            void main() {
            // our flowmap
            vec4 flowTexture = texture2D(uFlowTexture, vTextureCoord);
            
            // distort our image texture based on the flowmap values
            vec2 distortedCoords = vTextureCoord;
            distortedCoords -= flowTexture.xy * 0.15;
            
            // get our final texture based on the displaced coords
            vec4 texture = texture2D(uRenderTexture, distortedCoords);
            
            vec4 rTexture = texture2D(uRenderTexture, distortedCoords + flowTexture.xy * 0.025);
            vec4 gTexture = texture2D(uRenderTexture, distortedCoords);
            vec4 bTexture = texture2D(uRenderTexture, distortedCoords - flowTexture.xy * 0.025);
            
            // mix the BW image and the colored one based on our flowmap color values
            float mixValue = clamp((abs(flowTexture.r) + abs(flowTexture.g) + abs(flowTexture.b)) * 3.5, 0.0, 1.0);
            
            texture = mix(texture, vec4(rTexture.r, gTexture.g, bTexture.b, texture.a), mixValue);
            
            gl_FragColor = texture;
            }
            `;
            
            // creating our PingPongPlane flowmap plane
            // flowmap shaders
            const flowmapVs = `
            // #ifdef GL_FRAGMENT_PRECISION_HIGH
            precision highp float;
            // #else
            // precision mediump float;
            // #endif
            
            // default mandatory variables
            attribute vec3 aVertexPosition;
            attribute vec2 aTextureCoord;
            
            uniform mat4 uMVMatrix;
            uniform mat4 uPMatrix;
            
            // custom variables
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            void main() {
            vec3 vertexPosition = aVertexPosition;
            
            gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);
            
            // varyings
            vTextureCoord = aTextureCoord;
            vVertexPosition = vertexPosition;
            }
            `;
            
            const flowmapFs = `
            #ifdef GL_FRAGMENT_PRECISION_HIGH
            precision highp float;
            #else
            precision mediump float;
            #endif
            
            varying vec3 vVertexPosition;
            varying vec2 vTextureCoord;
            
            uniform sampler2D uFlowMap;
            
            uniform vec2 uMousePosition;
            uniform float uFalloff;
            uniform float uAlpha;
            uniform float uDissipation;
            uniform float uScrollDiff;
            uniform vec2 uVelocity;
            uniform float uAspect;
            uniform float uScrollDirection;
            uniform bool uHorizontal;
            uniform vec2 uFakeMousePosition;
            uniform vec2 uFakeVelocity;
            
            void main() {
            vec2 textCoords = vTextureCoord;
            vec2 mousePos = uMousePosition;
            float falloffAdjust = 0.0;
            vec2 velocity = uVelocity;
            
            vec4 color = texture2D(uFlowMap, textCoords) * uDissipation;
            // vec4 color = vec4(0.0, 0.0, 0.0, 1.0) * uDissipation;
            float f = uFalloff;
            if(abs(uScrollDiff) > 0.1) {
            mousePos = uFakeMousePosition;
            velocity = uFakeVelocity;
            if(uHorizontal) {
            // swap x and y
            mousePos = vec2(mousePos.y, mousePos.x);
            velocity = vec2(velocity.y, velocity.x);
            } 
            f *= max(1.0, abs(uScrollDiff * 1.5));
            }
            
            vec2 mouseTexPos = (mousePos + 1.0) * 0.5;
            vec2 cursor = vTextureCoord - mouseTexPos;
            
            vec3 stamp = vec3(velocity * vec2(1.0, -1.0), 1.0 - pow(1.0 - min(1.0, length(velocity)), 3.0));
            // stamp+=uScrollDiff*0.2;
            float falloff = smoothstep(f + falloffAdjust, 0.0, length(cursor)) * uAlpha;
            color.rgb = mix(color.rgb, stamp, vec3(falloff));
            
            gl_FragColor = color;
            }
            `;
            
            const checkWebGLSupport = () => {
                try {
                    var canvas = document.createElement("canvas");
                    return (
                        !!window.WebGLRenderingContext &&
                        (canvas.getContext("webgl") || canvas.getContext("experimental-webgl"))
                    );
                } catch (e) {
                    return false;
                }
            };
            
            const wait = ms => new Promise(resolve => setTimeout(resolve, ms));
            
            document.addEventListener("DOMContentLoaded", async () => {
                wait(3000);
                // find all our planes
                const planeImgElements = document.querySelectorAll(".distortion-slider__image");
            
                
                // Create an array of promises for image loading
                const imageLoadPromises = Array.from(planeImgElements).map(imgElem => {
                    return new Promise((resolve) => {
                        if (imgElem.complete) {
                            resolve();
                        } else {
                            imgElem.onload = () => resolve();
                            imgElem.onerror = () => resolve(); // Resolve even on error to prevent hanging
                        }
                    });
                });
            
                // Wait for all images to load
                await Promise.all(imageLoadPromises);
            
                let flowMaps = [];
                let deltaY = 0;
                let isTablet = window.innerWidth < 992;
                const wrappers = document.querySelectorAll(".distortion-slider__wrapper");
            
                // check if device support webgl
                if (!checkWebGLSupport() || isTablet) {
                    return;
                }
                
            
                for (let i = 0; i < planeImgElements.length; i++) {
                    const imgElem = planeImgElements[i];
                    imgElem.id = "img-" + i;
                    let curtains = null;
            
                    let imageWidth = imgElem.clientWidth;
                    let nIHeight = imgElem.naturalHeight;
                    let nIWidth = imgElem.naturalWidth;
                    let aspectRatio = nIWidth / nIHeight;
                    let imageHeight = nIWidth / aspectRatio;
                    let flowMap = null;
                    let scrollEffect = 0;
                    imgElem.style.filter = "blur(5px)";
            
                    // get the parent container
                    const containerElem = imgElem.parentElement;
            
                    // id for rendering loop
                    let rafId = null;
            
                    // use request animation frame to render our scene
                    function render() {
                        if (rafId) {
                            cancelAnimationFrame(rafId);
                        }
                        curtains.render();
            
                        rafId = requestAnimationFrame(render);
                    }
            
                    let isFirstObservation = true;
            
                    // handle intersection observer
                    const observer = new IntersectionObserver(
                        entries => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    if (isFirstObservation) {
                                        isFirstObservation = false;
                                        imageHeight = imgElem.clientHeight;
                                        imageWidth = imgElem.clientWidth;
                                        // initialize our scene
                                        initDistortion();
                                    }
            
                                    // if the element is in the viewport, start rendering
                                    render();
                                } else {
                                    // if the element is not in the viewport, stop rendering
                                    cancelAnimationFrame(rafId);
                                }
                            });
                        },
                        {
                            root: null,
                            rootMargin: "0px",
                            threshold: 0,
                        }
                    );
                    // run render function only when the element is in the viewport
                    observer.observe(imgElem);
            
                    async function initDistortion() {
                        // create wrapper for canvas and wrapper planes
                        const distortionWrapper = document.createElement("div");
                        distortionWrapper.style.position = "relative";
                        distortionWrapper.style.width = "fit-content";
                        distortionWrapper.style.height = "fit-content";
                        distortionWrapper.style.overflow = "hidden";
            
                        // create canvas;
                        const canvas = document.createElement("div");
                        canvas.id = "canvas-" + i;
                        canvas.style.width = "100%";
                        canvas.style.height = "100%";
                        canvas.style.position = "absolute";
                        canvas.style.top = "0";
                        canvas.style.left = "0";
            
                        // set sampler attribute for curtains js lib
                        imgElem.dataset.sampler = "planeTexture";
                        // pick the image src from the data-srcset attribute
                        const srcset = imgElem.getAttribute("srcset");
                        const src = imgElem.src || pickSrcFromSrcset(srcset);
                        imgElem.src = src;
                        const planeWrapperElem = document.createElement("div");
                        planeWrapperElem.style.position = "relative";
            
                        // create a div element that will wrap our image
                        const planeElem = document.createElement("div");
                        planeElem.classList.add("plane");
                        planeElem.style.position = "absolute";
                        planeElem.style.top = "0";
                        planeElem.style.right = "0";
                        planeElem.style.bottom = "0";
                        planeElem.style.left = "0";
                        planeElem.style.width = "100%";
                        planeElem.style.height = "100%";
            
                        planeElem.appendChild(imgElem);
                        planeWrapperElem.appendChild(planeElem);
                        distortionWrapper.appendChild(planeWrapperElem);
                        distortionWrapper.appendChild(canvas);
                        containerElem.appendChild(distortionWrapper);
                        // remove observation from img and set to distortionWrapper
                        observer.unobserve(imgElem);
                        observer.observe(distortionWrapper);
            
                        const convertPxToVw = px => {
                            return (px / window.innerWidth) * 100;
                        };
            
                        planeWrapperElem.style.width = convertPxToVw(imageWidth) + "vw";
                        planeWrapperElem.style.aspectRatio = aspectRatio;
                        planeWrapperElem.style.height = "auto";
            if(imageWidth == 0) {
                        	debugger;
            }
            
                        // set up our WebGL context and append the canvas to our wrapper
                        curtains = new Curtains({
                            container: canvas,
                            pixelRatio: Math.min(1.5, window.devicePixelRatio), // limit pixel ratio for performance
                            autoRender: false,
                            production: true,
                        });
            
                        // apply new style for img
                        distortionWrapper.classList.add("distortion");
            
                        curtains
                            .onScroll(data => {
                                applyPlanesParallax(planeCjs);
                            })
                            .onError(() => {
                                // we will add a class to the document body to display original images
                                document.body.classList.add("no-curtains", "planes-loaded");
                                imgElem.style.filter = "blur(0px)";
                            })
                            .onContextLost(() => {
                                // on context lost, try to restore the context
                                curtains.restoreContext();
                            });
            
                        const mouse = new Vec2();
                        const lastMouse = mouse.clone();
                        const velocity = new Vec2();
            
                        const bbox = curtains.getBoundingRect();
            
                        const params = {
                            vertexShader: vs,
                            fragmentShader: fs,
                            widthSegments: 1,
                            heightSegments: 1,
                            uniforms: {
                                time: {
                                    name: "uTime",
                                    type: "1f",
                                    value: 0,
                                },
                                mousePosition: {
                                    name: "uMousePosition",
                                    type: "2f",
                                    value: mouse,
                                },
                                aspect: {
                                    name: "uAspect",
                                    type: "1f",
                                    value: bbox.width / bbox.height,
                                },
                                parallax: {
                                    name: "uParallax",
                                    type: "1f",
                                    value: 0,
                                },
                                scrollEffect: {
                                    name: "uScrollEffect",
                                    type: "1f",
                                    value: 0,
                                },
                            },
                        };
                        // create our plane
            
                        const handlePlane = plane => {
                            plane
                                .onAfterResize(() => {
                                    isTablet = window.innerWidth < 992;
                                })
                                .onRender(() => {
                                    plane.uniforms.time.value++;
                                    plane.uniforms.mousePosition.value =
                                        plane.mouseToPlaneCoords(mouse);
                                });
                        };
            
                        let planeCjs = new Plane(curtains, planeElem, params);
                        handlePlane(planeCjs);
            
                        function applyPlanesParallax(plane) {
                            plane._translation.y = 0;
                            plane._translation.x = 0;
                        }
            
                        /*** POST PROCESSING ***/
                        // we'll be adding a flowmap rgb shift effect and fxaapass
            
                        // mouse/touch move
                        function onMouseMove(e) {
                            // velocity is our mouse position minus our mouse last position
                            lastMouse.copy(mouse);
            
                            // touch event
                            if (e.targetTouches) {
                                mouse.set(e.targetTouches[0].offsetX, e.targetTouches[0].offsetY);
                            }
                            // mouse event
                            else {
                                mouse.set(e.offsetX, e.offsetY);
                            }
            
                            // divided by a frame duration (roughly)
                            velocity.set(
                                (mouse.x - lastMouse.x) * 0.1,
                                (mouse.y - lastMouse.y) * 0.1
                            );
            
                            // we should update the velocity
                            updateVelocity = true;
                        }
            
                        distortionWrapper.addEventListener("mousemove", onMouseMove);
                        distortionWrapper.addEventListener("touchmove", onMouseMove, {
                            passive: true,
                        });
            
                        // if we should update the velocity or not
                        let updateVelocity = false;
            
                        const planeBbox = planeCjs.getBoundingRect();
                        // note the use of half float texture and the custom sampler name used in our fragment shader
                        const flowMapParams = {
                            sampler: "uFlowMap",
                            vertexShader: flowmapVs,
                            fragmentShader: flowmapFs,
                            watchScroll: false, // position is fixed
                            texturesOptions: {
                                floatingPoint: "half-float", // use half float texture when possible
                            },
                            uniforms: {
                                mousePosition: {
                                    name: "uMousePosition",
                                    type: "2f",
                                    value: mouse,
                                },
                                // size of the cursor
                                fallOff: {
                                    name: "uFalloff",
                                    type: "1f",
                                    value:
                                        bbox.width > bbox.height
                                            ? bbox.width / 1000
                                            : bbox.height / 1000,
                                },
                                // alpha of the cursor
                                alpha: {
                                    name: "uAlpha",
                                    type: "1f",
                                    value: 1,
                                },
                                // how much the cursor must dissipate over time (ie trail length)
                                // closer to 1 = no dissipation
                                dissipation: {
                                    name: "uDissipation",
                                    type: "1f",
                                    value: 0.15,
                                },
                                // our velocity
                                velocity: {
                                    name: "uVelocity",
                                    type: "2f",
                                    value: velocity,
                                },
                                // window aspect ratio to draw a circle
                                aspect: {
                                    name: "uAspect",
                                    type: "1f",
                                    value: bbox.width / bbox.height,
                                },
                                scrollDiff: {
                                    name: "uScrollDiff",
                                    type: "1f",
                                    value: 0,
                                },
                                scrollDirection: {
                                    name: "uScrollDirection",
                                    type: "1f",
                                    value: 0,
                                },
                                fakeMousePosition: {
                                    name: "uFakeMousePosition",
                                    type: "2f",
                                    value: new Vec2(0, 0),
                                },
                                fakeVelocity: {
                                    name: "uFakeVelocity",
                                    type: "2f",
                                    value: new Vec2(0, 0),
                                },
                            },
                        };
            
                        // our ping pong plane
                        flowMap = new PingPongPlane(curtains, curtains.container, flowMapParams);
                        flowMaps.push(flowMap);
            
                        function mouseToPlaneCoords(mouse, canvasWidth, canvasHeight) {
                            // Normalize mouse coordinates to range [-1, 1]
                            const xClipSpace = (mouse.x / canvasWidth) * 2 - 1;
                            const yClipSpace = 1 - (mouse.y / canvasHeight) * 2;
            
                            return new Vec2(xClipSpace, yClipSpace);
                        }
            
                        flowMap
                            .onRender(() => {
                                // update mouse position
                                const mouseUv = mouseToPlaneCoords(mouse, bbox.width, bbox.height);
            
                                flowMap.uniforms.mousePosition.value = mouseUv;
            
                                // console.log("mouseUv", mouseUv);
            
                                // update velocity
                                if (!updateVelocity) {
                                    velocity.set(
                                        curtains.lerp(velocity.x, 0, 0.1),
                                        curtains.lerp(velocity.y, 0, 0.1)
                                    );
                                }
                                updateVelocity = false;
            
                                flowMap.uniforms.velocity.value = new Vec2(
                                    curtains.lerp(velocity.x, 0, 0.1),
                                    curtains.lerp(velocity.y, 0, 0.1)
                                );
                            })
                            .onAfterResize(() => {
                                // update our window aspect ratio uniform
                                const boundingRect = flowMap.getBoundingRect();
                                if (!boundingRect.width || !boundingRect.height) {
                                    console.log("boundingRect", boundingRect);
                                    return;
                                }
                                flowMap.uniforms.aspect.value =
                                    boundingRect.width / boundingRect.height;
                                flowMap.uniforms.fallOff.value =
                                    bbox.width > bbox.height
                                        ? bbox.width / 1000
                                        : bbox.height / 1000;
                                console.log(
                                    "After resize:",
                                    `fallof:${flowMap.uniforms.fallOff.value}`,
                                    `aspect:${flowMap.uniforms.aspect.value}`
                                );
            
                                // if this is tablet stop rendering flow map
                                if (isTablet) {
                                    flowMap.visible = false;
                                } else {
                                    flowMap.visible = true;
                                }
                            });
            
                        const passParams = {
                            vertexShader: displacementVs,
                            fragmentShader: displacementFs,
                            depth: false, // explicitly disable depth for the ripple effect to work
                        };
            
                        const shaderPass = new ShaderPass(curtains, passParams);
            
                        // create a texture that will hold our flowmap
                        const flowTexture = shaderPass.createTexture({
                            sampler: "uFlowTexture",
                            floatingPoint: "half-float",
                            fromTexture: flowMap.getTexture(), // set it based on our PingPongPlane flowmap plane's texture
                        });
            
                        // wait for our first pass and the flowmap to be ready
                        flowTexture.onSourceUploaded(() => {
                            const fxaaPass = new FXAAPass(curtains);
                        });
                    }
                    let maxDistance = 600;
                    const handleMouseMove = e => {
                        // if (isTablet) return;
                        // Get mouse position
                        const mouseX = e.clientX;
                        const mouseY = e.clientY;
            
                        // Iterate over all elements
                        wrappers.forEach(function (circle) {
                            // Calculate distance from element to mouse
                            const distX = Math.abs(circle.getBoundingClientRect().left - mouseX);
                            const distY = Math.abs(circle.getBoundingClientRect().top - mouseY);
            
                            // Calculate distance from element to mouse
                            const distance = Math.sqrt(distX * distX + distY * distY);
                            // animate
                            if (distance < maxDistance) {
                                circle.style.transition = "transform 0.3s";
                                circle.style.transform = `translate(${
                                    (distX / maxDistance) * 15
                                }px, ${(distY / maxDistance) * 15}px)`;
                            }
                        });
                    };
            
                    window.addEventListener("mousemove", handleMouseMove);
                }
            });
         </script>
      </div>
      <script src="https://d3e54v103j8qbb.cloudfront.net/js/jquery-3.5.1.min.dc5e7f18c8.js?site=663190d7e1b00c3870b15fa3" type="text/javascript" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script><script src="https://cdn.prod.website-files.com/663190d7e1b00c3870b15fa3/js/webflow.4068eb86a.js" type="text/javascript"></script><!-- Swiper -->
      <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
      <!-- Cursor -->
      <div id="video-cursor" data-shown="false" data-is-play="false" data-is-open="false" data-is-compact="false" data-is-view="true">
         <div id="video-cursor-borders" class="corner_border corner_border_small">
            <svg id="video-cursor-play" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 12 16" fill="none">
               <path d="M0 1.86852C0 1.06982 0.890145 0.59343 1.5547 1.03647L10.7519 7.16795C11.3457 7.56377 11.3457 8.43623 10.7519 8.83205L1.5547 14.9635C0.890144 15.4066 0 14.9302 0 14.1315V1.86852Z" fill="#D0311D"></path>
            </svg>
            <svg id="video-cursor-circle" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 12 12" fill="none">
               <circle cx="6" cy="6" r="6" fill="#D0311D"></circle>
            </svg>
            <div class="corner-borders corner-borders--left"></div>
            <div class="corner-borders corner-borders--right"></div>
         </div>
         <span class="video-cursor-span" id="video-cursor-span-play">Play</span>
         <span class="video-cursor-span" id="video-cursor-span-open">Open</span>
         <div id="video-cursor-view-container">
            <span id="video-cursor-view">View</span>
         </div>
      </div>
      <style>
         [data-cursor-hover="open"],
         [data-cursor-hover="play"],
         [data-cursor-hover="compact"],
         [data-cursor-hover="view"] {
         cursor: none !important;
         }
         #video-cursor {
         position: fixed;
         display: flex;
         justify-content: center;
         align-items: center;
         flex-direction: column;
         gap: 0.25rem;
         z-index: 9999;
         transform: translate(-1.3125rem, -1.3125rem);
         pointer-events: none;
         transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
         }
         @media (max-width: 768px) {
         #video-cursor {
         display: none;
         cursor: auto !important;
         }
         [data-cursor-hover="open"],
         [data-cursor-hover="play"],
         [data-cursor-hover="compact"],
         [data-cursor-hover="view"] {
         cursor: auto !important;
         }
         }
         #video-cursor-borders {
         position: relative;
         width: 2.625rem;
         height: 2.625rem;
         transition: all 0.3s ease-in-out;
         }
         #video-cursor-span {
         font-size: 0.75rem;
         color: white;
         font-weight: 300;
         font-family: "Work Sans", sans-serif;
         line-height: 150%;
         transition: all 0.3s ease-in-out;
         opacity: 1;
         }
         #video-cursor-circle,
         #video-cursor-play {
         position: absolute;
         width: 1rem;
         height: 1rem;
         opacity: 0;
         transition: all 0.3s ease-in-out;
         top: 50%;
         left: 50%;
         transform: translate(-50%, -50%);
         }
         #video-cursor-span-play,
         #video-cursor-span-open {
         position: absolute;
         opacity: 0;
         transition: all 0.3s ease-in-out;
         bottom: 0;
         left: 0;
         right: 0;
         text-align: center;
         }
         #video-cursor-span-play {
         position: relative;
         }
         #video-cursor-view-container {
         border-radius: 1.5rem;
         padding: 0.4375rem 1rem;
         background-color: #fff;
         display: flex;
         justify-content: center;
         align-items: center;
         }
         #video-cursor-view {
         font-size: 0.875rem;
         color: #101010;
         font-weight: 600;
         font-family: Work Sans, sans-serif;
         line-height: 150%;
         letter-spacing: -0.5px;
         text-transform: uppercase;
         }
         /* --- States */
         /* Shown */
         #video-cursor[data-shown="true"] {
         opacity: 1;
         }
         /* Hidden */
         #video-cursor[data-shown="false"] {
         opacity: 0;
         }
         /* Open */
         #video-cursor[data-is-open="true"] #video-cursor-circle {
         opacity: 1;
         }
         #video-cursor[data-is-open="true"] #video-cursor-span-open {
         opacity: 1;
         }
         /* Play */
         #video-cursor[data-is-play="true"] #video-cursor-play {
         opacity: 1;
         }
         #video-cursor[data-is-play="true"] #video-cursor-span-play {
         opacity: 1;
         }
         /* Compact */
         #video-cursor[data-is-compact="true"] {
         transform: translate(-0.625rem, -0.625rem);
         }
         #video-cursor[data-is-compact="true"] #video-cursor-borders {
         width: 1.25rem;
         height: 1.25rem;
         }
         #video-cursor[data-is-compact="true"] .video-cursor-span {
         opacity: 0;
         }
         /* View */
         #video-cursor[data-is-view="true"] {
         transform: translate(-50%, -50%);
         mix-blend-mode: difference;
         }
         #video-cursor[data-is-view="false"] #video-cursor-view-container {
         opacity: 0;
         display: none;
         }
         #video-cursor[data-is-view="true"] #video-cursor-view-container {
         opacity: 1;
         }
         #video-cursor[data-is-view="true"] #video-cursor-borders {
         display: none;
         }
         #video-cursor[data-is-view="true"] .video-cursor-span {
         display: none;
         }
      </style>
      <script>
         (() => {
         	window.customCursor = {
         		hoveredEls: [],
         	};
         
         	const videoCursorEl = document.querySelector("#video-cursor");
         
         	window.addEventListener("mousemove", (e) => {
         		videoCursorEl.style.left = `${e.clientX}px`;
         		videoCursorEl.style.top = `${e.clientY}px`;
         
         		if (
         			videoCursorEl.getAttribute("data-shown") === "false" &&
         			(videoCursorEl.getAttribute("data-is-open") === "true" ||
         				videoCursorEl.getAttribute("data-is-play") === "true" ||
         				videoCursorEl.getAttribute("data-is-compact") === "true")
         		) {
         			videoCursorEl.setAttribute("data-shown", "true");
         		}
         	});
         
         	const updateCursor = () => {
         		const { hoveredEls } = window.customCursor;
         
         		if (hoveredEls.length) {
         			const { type } = hoveredEls[hoveredEls.length - 1];
         
         			if (type === "open") {
         				videoCursorEl.setAttribute("data-is-open", "true");
         			} else {
         				videoCursorEl.setAttribute("data-is-open", "false");
         			}
         
         			if (type === "play") {
         				videoCursorEl.setAttribute("data-is-play", "true");
         			} else {
         				videoCursorEl.setAttribute("data-is-play", "false");
         			}
         
         			if (type === "compact") {
         				videoCursorEl.setAttribute("data-is-compact", "true");
         			} else {
         				videoCursorEl.setAttribute("data-is-compact", "false");
         			}
         
         			if (type === "view") {
         				videoCursorEl.setAttribute("data-is-view", "true");
         			} else {
         				videoCursorEl.setAttribute("data-is-view", "false");
         			}
         
         			videoCursorEl.setAttribute("data-shown", "true");
         		} else {
         			videoCursorEl.setAttribute("data-shown", "false");
         		}
         
         		requestAnimationFrame(updateCursor);
         	};
         
         	const hoverOpenEls = document.querySelectorAll(
         		'[data-cursor-hover="open"]',
         	);
         
         	hoverOpenEls.forEach((el) => {
         		el.addEventListener("mouseenter", () => {
         			if (
         				window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls.push({
         				type: "open",
         				el,
         			});
         
         			updateCursor();
         		});
         
         		el.addEventListener("mouseleave", () => {
         			if (
         				!window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls = window.customCursor.hoveredEls.filter(
         				(hoveredEl) => hoveredEl.el !== el,
         			);
         
         			updateCursor();
         		});
         	});
         
         	const hoverPlayEls = document.querySelectorAll(
         		'[data-cursor-hover="play"]',
         	);
         
         	hoverPlayEls.forEach((el) => {
         		el.addEventListener("mouseenter", () => {
         			if (
         				window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls.push({
         				type: "play",
         				el,
         			});
         
         			updateCursor();
         		});
         
         		el.addEventListener("mouseleave", () => {
         			if (
         				!window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls = window.customCursor.hoveredEls.filter(
         				(hoveredEl) => hoveredEl.el !== el,
         			);
         
         			updateCursor();
         		});
         	});
         
         	const hoverCompactEls = document.querySelectorAll(
         		'[data-cursor-hover="compact"]',
         	);
         
         	hoverCompactEls.forEach((el) => {
         		el.addEventListener("mouseenter", () => {
         			if (
         				window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls.push({
         				type: "compact",
         				el,
         			});
         
         			updateCursor();
         		});
         
         		el.addEventListener("mouseleave", () => {
         			if (
         				!window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls = window.customCursor.hoveredEls.filter(
         				(hoveredEl) => hoveredEl.el !== el,
         			);
         
         			updateCursor();
         		});
         	});
         
         	const hoverViewEls = document.querySelectorAll(
         		'[data-cursor-hover="view"]',
         	);
         
         	hoverViewEls.forEach((el) => {
         		el.addEventListener("mouseenter", () => {
         			if (
         				window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls.push({
         				type: "view",
         				el,
         			});
         
         			updateCursor();
         		});
         
         		el.addEventListener("mouseleave", () => {
         			if (
         				!window.customCursor.hoveredEls.some(
         					(hoveredEl) => hoveredEl.el === el,
         				)
         			) {
         				return;
         			}
         
         			window.customCursor.hoveredEls = window.customCursor.hoveredEls.filter(
         				(hoveredEl) => hoveredEl.el !== el,
         			);
         
         			updateCursor();
         		});
         	});
         })();
      </script>
      <!-- Camera -->
      <style>
         @keyframes cameraFocus {
         0% {
         transform: scale(1);
         filter: blur(0);
         }
         12.5% {
         filter: blur(8px);
         }
         25% {
         transform: scale(1.2);
         filter: blur(0);
         }
         37.5% {
         transform: scale(1.2);
         filter: blur(0);
         }
         50% {
         transform: scale(1.4);
         filter: blur(8px);
         }
         62.5% {
         transform: scale(1.4);
         filter: blur(0);
         }
         75% {
         transform: scale(1.2);
         filter: blur(8px);
         }
         87.5% {
         transform: scale(1.2);
         filter: blur(0);
         }
         100% {
         transform: scale(1);
         filter: blur(0);
         }
         }
         @keyframes blinkRec {
         0%,
         100% {
         opacity: 0;
         }
         25% {
         opacity: 1;
         }
         75% {
         opacity: 1;
         }
         }
      </style>
      <!-- Scrumble -->
      <script>
         (() => {
         	const DEFAULT_SCRUMBLE_DURATION = 500;
         
         	const textScrumbles = new Set(
         		Array.from(document.querySelectorAll("[data-scrumble-text]")).map(
         			(textScrumble) => {
         				return textScrumble.getAttribute("data-scrumble-text");
         			},
         		),
         	);
         
         	const scrumbles = Array.from(textScrumbles)
         		.map((textScrumble) => {
         			const textScrumbleElements = Array.from(
         				document.querySelectorAll(`[data-scrumble-text="${textScrumble}"]`),
         			);
         			const scrumbleProgressEl = document.querySelector(
         				`[data-scrumble-progress="${textScrumble}"]`,
         			);
         
         			if (!textScrumbleElements.length || !scrumbleProgressEl) {
         				return;
         			}
         
         			const scrumbleDuration =
         				+scrumbleProgressEl.getAttribute("data-scrumble-duration") ||
         				DEFAULT_SCRUMBLE_DURATION;
         
         			const scrumbleChars = [];
         
         			// Split scrumbled text into characters
         			textScrumbleElements.forEach((textScrumbleElement) => {
         				const scrumbleChildren = [];
         
         				Array.from(textScrumbleElement.childNodes).forEach((child, index) => {
         					if (child.nodeType === 3) {
         						scrumbleChildren.push(child.nodeValue);
         					} else {
         						scrumbleChildren.push(child);
         					}
         
         					child.remove();
         				});
         
         				textScrumbleElement.style.opacity = 1;
         
         				const createCharSpanEl = (character) => {
         					const span = document.createElement("span");
         					span.style.whiteSpace = "pre";
         					span.style.transition = `opacity ${scrumbleDuration}ms ease-out`;
         					span.style.opacity = 0;
         
         					span.textContent = character;
         
         					return span;
         				};
         
         				scrumbleChildren.forEach((child) => {
         					if (typeof child === "string") {
         						child.split("").forEach((character) => {
         							const span = createCharSpanEl(character);
         
         							textScrumbleElement.appendChild(span);
         
         							if (character !== " ") {
         								scrumbleChars.push({
         									el: span,
         									position: Math.floor(Math.random() * 91),
         								});
         							}
         						});
         					} else if (child.tagName === "BR") {
         						const brDiv = document.createElement("div");
         						brDiv.style.width = "100%";
         
         						textScrumbleElement.appendChild(brDiv);
         					} else {
         						textScrumbleElement.appendChild(child);
         					}
         				});
         			});
         
         			// Animate scrumbled text
         			const getOpacityByProgress = (progress, position) => {
         				let opacity = 0;
         				if (progress >= position && progress - 10 >= position) {
         					opacity = 1;
         				} else if (progress > position) {
         					opacity = (progress - position) / (scrumbleDuration - position);
         				}
         
         				return opacity;
         			};
         
         			const updateScrumbleChars = (progress) => {
         				scrumbleChars.forEach((scrumbleChar) => {
         					scrumbleChar.el.style.opacity = getOpacityByProgress(
         						progress,
         						scrumbleChar.position,
         					);
         				});
         			};
         
         			return {
         				textScrumble,
         				scrumbleProgressEl,
         				updateScrumbleChars,
         			};
         		})
         		.filter(Boolean);
         
         	// Tick
         	const mutationObserver = new MutationObserver((mutations) => {
         		mutations.forEach((mutation) => {
         			const textScrumble = scrumbles.find(
         				(scrumble) =>
         					scrumble.textScrumble ===
         					mutation.target.getAttribute("data-scrumble-progress"),
         			);
         
         			if (textScrumble) {
         				textScrumble.updateScrumbleChars(
         					+mutation.target.style.opacity * 100,
         				);
         			}
         		});
         	});
         
         	scrumbles.forEach((scrumble) => {
         		mutationObserver.observe(scrumble.scrumbleProgressEl, {
         			attributes: true,
         			attributeFilter: ["style"],
         		});
         	});
         
         	const handleResize = () => {
         		scrumbles
         			.filter(
         				(scrumble) =>
         					+scrumble.scrumbleProgressEl.getAttribute(
         						"data-scrumble-responsive",
         					) > 0 &&
         					window.innerWidth >
         						+scrumble.scrumbleProgressEl.getAttribute(
         							"data-scrumble-responsive",
         						),
         			)
         			.forEach((scrumble) => {
         				scrumble.scrumbleProgressEl.style.opacity = 1;
         			});
         	};
         
         	window.addEventListener("resize", handleResize);
         	handleResize();
         })();
      </script>
      <!-- Corner Borders -->
      <style>
         .corner-borders::before,
         .corner-borders::after {
         border-color: white;
         border-width: 1px;
         content: "";
         display: block;
         height: 1.1svw;
         width: 1.1svw;
         min-height: 0.75rem;
         max-height: 1.1svw;
         min-width: 0.75rem;
         max-width: 1.1svw;
         pointer-events: none;
         position: absolute;
         transition: all 0.3s ease-in-out;
         }
         .corner_border_small .corner-borders::before,
         .corner_border_small .corner-borders::after {
         height: 0.375rem;
         width: 0.375rem;
         min-height: unset;
         min-width: unset;
         }
         .corner_border_wide .corner-borders::before,
         .corner_border_wide .corner-borders::after {
         height: 2.125rem;
         width: 1.25rem;
         }
         .corners.w-embed {
         position: static;
         z-index: 0;
         }
         .corner-borders--left::before,
         .corner-borders--left::after {
         left: 0;
         }
         .corner-borders--left::before {
         border-left-style: solid;
         border-top-style: solid;
         top: 0;
         }
         .corner-borders--left::after {
         border-bottom-style: solid;
         border-left-style: solid;
         bottom: 0;
         }
         .corner-borders--right::before,
         .corner-borders--right::after {
         right: 0;
         }
         .corner-borders--right::before {
         border-right-style: solid;
         border-top-style: solid;
         top: 0;
         }
         .corner-borders--right::after {
         border-bottom-style: solid;
         border-right-style: solid;
         bottom: 0;
         }
         /* Button */
         .corners_button_frame {
         transition: all 0.3s ease-in-out;
         }
         .corners_button_wrapper .corners_button:hover ~ .corners_button_frame {
         background-color: rgba(255, 255, 255, 0.05);
         transform: scale(0.98);
         }
         .corners_button_wrapper
         .corners_button:hover
         ~ .corners_button_frame
         .corner-borders::before,
         .corners_button_wrapper
         .corners_button:hover
         ~ .corners_button_frame
         .corner-borders::after {
         border-color: #d0311d;
         }
      </style>
      <!-- Menu icon -->
      <style>
         /* ---- Animation */
         /* Navbar */
         .navbar_container[data-is-visible="false"] {
         transform: translateY(-100%);
         }
         .navbar_container[data-is-visible="true"] {
         transform: translateY(0);
         }
         /* Menu */
         .menu-icon.open .menu-icon-line {
         opacity: 0;
         width: 100%;
         }
         .menu-icon.open::before,
         .menu-icon.open::after {
         box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);
         }
         .menu-icon.open::before {
         animation-name: menu-icon-before;
         animation-duration: 0.5s;
         animation-timing-function: ease-out;
         animation-fill-mode: forwards;
         animation-play-state: running;
         }
         .menu-icon.open::after {
         animation-name: menu-icon-after;
         animation-duration: 0.5s;
         animation-timing-function: ease-out;
         animation-fill-mode: forwards;
         animation-play-state: running;
         }
         .menu-icon.close .menu-icon-line {
         opacity: 1;
         }
         .menu-icon.close::before {
         animation-name: menu-icon-before-rev;
         animation-duration: 0.5s;
         animation-timing-function: ease-out;
         animation-fill-mode: forwards;
         animation-play-state: running;
         }
         .menu-icon.close::after {
         animation-name: menu-icon-after-rev;
         animation-duration: 0.5s;
         animation-timing-function: ease-out;
         /* animation-fill-mode: forwards; */
         animation-play-state: running;
         }
         @keyframes menu-icon-before {
         0% {
         width: 100%;
         transform: rotate(0);
         top: 0;
         }
         50% {
         width: 100%;
         transform: rotate(0);
         top: calc(50% - (0.19rem / 2));
         }
         100% {
         width: 100%;
         transform: rotate(45deg);
         top: calc(50% - (0.19rem / 2));
         }
         }
         @keyframes menu-icon-after {
         0% {
         transform: rotate(0);
         bottom: 0;
         }
         25% {
         width: 100%;
         }
         50% {
         width: 100%;
         transform: rotate(0);
         bottom: calc(50% - (0.19rem / 2));
         }
         100% {
         width: 100%;
         transform: rotate(-45deg);
         bottom: calc(50% - (0.19rem / 2));
         }
         }
         @keyframes menu-icon-before-rev {
         0% {
         width: 100%;
         transform: rotate(45deg);
         top: calc(50% - (0.19rem / 2));
         }
         50% {
         width: 100%;
         transform: rotate(0);
         top: calc(50% - (0.19rem / 2));
         }
         100% {
         transform: rotate(0);
         top: 0;
         width: 100%;
         }
         }
         @keyframes menu-icon-after-rev {
         0% {
         width: 100%;
         transform: rotate(-45deg);
         bottom: calc(50% - (0.19rem / 2));
         }
         50% {
         width: 100%;
         transform: rotate(0);
         bottom: calc(50% - (0.19rem / 2));
         }
         100% {
         transform: rotate(0);
         bottom: 0;
         width: 100%;
         }
         }
      </style>
      <script>
         function getScrollbarWidth() {
         	const outer = document.createElement("div");
         	outer.style.visibility = "hidden";
         	outer.style.overflow = "scroll";
         	outer.style.msOverflowStyle = "scrollbar";
         	document.body.appendChild(outer);
         
         	const inner = document.createElement("div");
         	outer.appendChild(inner);
         
         	const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
         
         	outer.parentNode.removeChild(outer);
         
         	return scrollbarWidth;
         }
         
         (() => {
         	// Navbar
         	function handleMenuStateUpdate(isOpen) {
         		const bodyEl = document.querySelector("body");
         		const headerContainer = document.querySelector(".navbar_container");
         		const navbarInner = document.querySelector(".navbar_container_inner");
         
         		if (isOpen) {
         			const scrollbarWidth = getScrollbarWidth();
         
         			let padding = 0;
         
         			switch (true) {
         				case scrollbarWidth > 0 && scrollbarWidth <= 8:
         					padding = scrollbarWidth / 2 - 4;
         					break;
         				case scrollbarWidth > 8:
         					padding = scrollbarWidth / 2 + 4;
         					break;
         			}
         
         			navbarInner.style.paddingRight = `${padding}px`;
         			bodyEl.style.overflow = "hidden";
         			bodyEl.style.height = "100vh";
         
         			setTimeout(() => {
         				headerContainer.setAttribute("data-is-visible", "true");
         			}, 500);
         		} else {
         			bodyEl.style.overflow = "auto";
         			bodyEl.style.height = "auto";
         			navbarInner.style.paddingRight = "0px";
         		}
         	}
         
         	//Logo Icon
         	const logoLinkEl = document.querySelector(".navbar_main_link");
         
         	logoLinkEl.addEventListener("click", () => {
         		localStorage.setItem("homeDisableIntro", "true");
         	});
         
         	// Interactive menu icon
         	const interactiveMenuIcons = document.querySelectorAll(
         		".navbar_container .menu-icon.interactive",
         	);
         
         	interactiveMenuIcons.forEach((menuIcon) => {
         		let closeTimeout = null;
         
         		menuIcon.addEventListener("click", () => {
         			menuIcon.classList.toggle("open");
         
         			if (menuIcon.classList.contains("open")) {
         				menuIcon.classList.remove("close");
         				handleMenuStateUpdate(true);
         			} else {
         				menuIcon.classList.add("close");
         				handleMenuStateUpdate(false);
         
         				if (closeTimeout) {
         					clearTimeout(closeTimeout);
         				}
         			}
         		});
         
         		menuIcon.addEventListener("animationend", () => {
         			if (closeTimeout) {
         				clearTimeout(closeTimeout);
         			}
         
         			if (menuIcon.classList.contains("close")) {
         				closeTimeout = setTimeout(() => {
         					menuIcon.classList.remove("close");
         				}, 50);
         			}
         		});
         	});
         
         	// Sticky navbar
         	let timeout = null;
         	let prevScrollY = window.scrollY;
         
         	function scan() {
         		const headerContainer = document.querySelector(".navbar_container");
         
         		const isVisible =
         			headerContainer.getAttribute("data-is-visible") !== "false";
         
         		if (window.scrollY <= 0) {
         			prevScrollY = 1;
         		}
         
         		if (window.scrollY > prevScrollY && isVisible) {
         			headerContainer.setAttribute("data-is-visible", "false");
         		} else if (window.scrollY < prevScrollY && !isVisible) {
         			headerContainer.setAttribute("data-is-visible", "true");
         		}
         
         		prevScrollY = window.scrollY;
         	}
         
         	window.addEventListener("scroll", () => {
         		clearTimeout(timeout);
         		timeout = setTimeout(scan, 10);
         	});
         })();
      </script>
      <!-- Cookies popup -->
      <style>
         .cookie_popup.shown {
         animation-name: cookie_popup_show;
         animation-duration: 0.5s;
         animation-delay: 0.5s;
         animation-timing-function: ease-out;
         animation-fill-mode: forwards;
         animation-play-state: running;
         display: flex;
         transform: translateY(calc(3.4svw + 101%));
         }
         .cookie_popup.hide {
         animation-name: cookie_popup_hide;
         animation-duration: 0.5s;
         animation-timing-function: ease-out;
         animation-fill-mode: forwards;
         animation-play-state: running;
         animation-delay: 0s;
         }
         @keyframes cookie_popup_show {
         0% {
         transform: translateY(calc(3.4svw + 101%));
         }
         100% {
         transform: translateY(0);
         }
         }
         @keyframes cookie_popup_hide {
         0% {
         transform: translateY(0);
         }
         99% {
         transform: translateY(calc(3.4svw + 101%));
         }
         100% {
         display: none;
         }
         }
      </style>
      <script>
         const homePageOverlay = document.querySelector(".entry-close-overlay");
         
         const cookiesPopups = document.querySelectorAll(".cookie_popup");
         
         const answer = localStorage.getItem("cookiesAnswer");
         const answeredAt =
         	+localStorage.getItem("cookiesAnsweredAt") || Date.now() - 1000 * 60 * 60;
         
         cookiesPopups.forEach((popup) => {
         	//If no answer or denied more than 30 minutes ago
         	if (
         		!answer ||
         		(answer === "deny" && Date.now() - answeredAt > 1000 * 60 * 30)
         	) {
         		if (homePageOverlay) {
         			homePageOverlay.addEventListener("click", () => {
         				setTimeout(() => {
         					popup.classList.add("shown");
         				}, 6000);
         			});
         		} else {
         			setTimeout(() => {
         				popup.classList.add("shown");
         			}, 2500);
         		}
         	}
         
         	//Subscribe to buttons
         	const acceptButton = popup.querySelector(".corners_button_wrapper");
         	const denyButton = popup.querySelector(".cookie_popup_close_icon");
         
         	const hideCookiePopup = () => {
         		popup.classList.add("hide");
         
         		setTimeout(() => {
         			popup.classList.remove("hide", "shown");
         		}, 500);
         	};
         
         	acceptButton.addEventListener("click", () => {
         		localStorage.setItem("cookiesAnswer", "accept");
         		localStorage.setItem("cookiesAnsweredAt", Date.now());
         
         		hideCookiePopup();
         	});
         
         	denyButton.addEventListener("click", () => {
         		localStorage.setItem("cookiesAnswer", "deny");
         		localStorage.setItem("cookiesAnsweredAt", Date.now());
         
         		hideCookiePopup();
         	});
         });
      </script>
      <!-- Video Loading Optimization -->
      <script>
         (() => {
         	const intersectionVideos = document.querySelectorAll(
         		'video[data-intersection="true"], source[data-intersection="true"]',
         	);
         
         	const observer = new IntersectionObserver(
         		(entries) => {
         			entries.forEach((entry) => {
         				const targetVideo = entry.target;
         				const targetSource = targetVideo.querySelector("source");
         
         				const src =
         					targetVideo.getAttribute("data-src") ??
         					targetSource?.getAttribute("data-src") ??
         					null;
         
         				if (src && entry.isIntersecting) {
         					if (targetSource) {
         						targetSource.src = src;
         						targetSource.removeAttribute("data-src");
         					} else {
         						targetVideo.src = src;
         						targetVideo.removeAttribute("data-src");
         					}
         
         					targetVideo.load();
         				}
         			});
         		},
         		{
         			threshold: 0.1,
         		},
         	);
         
         	intersectionVideos.forEach((video) => {
         		if (video.tagName === "VIDEO") {
         			observer.observe(video);
         		} else {
         			const videoEl = video.closest("video");
         			observer.observe(videoEl);
         		}
         	});
         })();
      </script>
      <!-- Other Projects -->
      <style>
         .project_other_projects_list::-webkit-scrollbar {
         width: 0px;
         display: none;
         }
         .project_other_projects_list::-webkit-scrollbar-track {
         background: transparent;
         }
         .project_other_projects_list::-webkit-scrollbar-thumb {
         background: transparent;
         }
         /* Handle on hover */
         .project_other_projects_list::-webkit-scrollbar-thumb:hover {
         background: transparent;
         }
         .project_other_projects_list_item:last-child .project_other_project {
         border-bottom: none;
         }
      </style>
      <script>
         (() => {
         	const otherProjectsEl = document.querySelector(".project_other");
         
         	if (otherProjectsEl) {
         		let isOtherProjectsLoading = false;
         
         		const loadOtherProjectsVideos = async () => {
         			if (isOtherProjectsLoading) {
         				return;
         			}
         			isOtherProjectsLoading = true;
         
         			const projectsList = otherProjectsEl.querySelector(
         				".project_other_projects_list",
         			);
         
         			const otherProjectVideos = projectsList.querySelectorAll("video");
         
         			for (const video of otherProjectVideos) {
         				await new Promise((resolve) => {
         					const timeout = setTimeout(() => {
         						resolve();
         					}, 10000);
         
         					video.oncanplaythrough = () => {
         						clearTimeout(timeout);
         						resolve();
         					};
         
         					const videoSrc = video.getAttribute("data-src");
         
         					if (videoSrc) {
         						video.src = videoSrc;
         						video.removeAttribute("data-src");
         						video.load();
         					} else {
         						const videoSourceEl = video.querySelector("source");
         						const sourceSrc = videoSourceEl.getAttribute("data-src");
         
         						if (sourceSrc) {
         							videoSourceEl.src = sourceSrc;
         							videoSourceEl.removeAttribute("data-src");
         							video.load();
         						} else {
         							clearTimeout(timeout);
         							resolve();
         						}
         					}
         				});
         			}
         		};
         
         		if (otherProjectsEl.getAttribute("data-force-load") !== "true") {
         			const observer = new MutationObserver((mutations) => {
         				mutations.forEach((mutation) => {
         					if (
         						mutation.attributeName === "data-force-load" &&
         						mutation.target.getAttribute("data-force-load") === "true"
         					) {
         						loadOtherProjectsVideos();
         					}
         				});
         			});
         
         			observer.observe(otherProjectsEl, {
         				attributes: true,
         				attributeFilter: ["data-force-load"],
         			});
         		} else {
         			loadOtherProjectsVideos();
         		}
         	}
         })();
      </script>
      <!-- Footer -->
      <script>
         (() => {
         	const backToTopButton = document.querySelector(
         		".footer_back_top_container",
         	);
         
         	backToTopButton.addEventListener("click", () => {
         		window.scrollTo({
         			top: 0,
         			behavior: "smooth",
         		});
         	});
         })();
      </script>
      <!-- Burn Revieal -->
      <script defer="" type="module">
         import * as THREE from "https://cdn.jsdelivr.net/npm/three@0.165.0/+esm";
         
         class BurnReveal {
         	// jsdoc types
         	/** @type {THREE.WebGLRenderer} */
         	threejs;
         	/** @type {THREE.Scene} */
         	scene;
         	/** @type {THREE.OrthographicCamera} */
         	camera;
         	/** @type {THREE.ShaderMaterial} */
         	material;
         	/** @type {number} */
         	totalTime;
         	/** @type {number} */
         	previousRAF;
         	/** @type {HTMLCanvasElement} */
         	canvas;
         
         	constructor() {}
         
         	async initialize() {
         		const canvas = document.createElement("canvas");
         		this.canvas = canvas;
         		this.canvas.style.backdropFilter = "blur(0)";
         		this.canvas.style.filter = "blur(0)";
         		this.canvas.style.transition = "filter 1s, backdrop-filter 0.5s";
         		this.canvas.style.backdropFilter = "blur(1px)";
         		this.canvas.style.filter = "blur(100px)";
         		this.canvas.style.pointerEvents = "none";
         		this.canvas.style.zIndex = "10000";
         		this.canvas.style.width = window.innerWidth + 500 + "px";
         		this.canvas.style.height = window.innerHeight + 500 + "px";
         		this.canvas.style.position = "fixed";
         		this.canvas.style.top = "-250px";
         		this.canvas.style.left = "-250px";
         		const renderer = new THREE.WebGLRenderer({
         			antialias: true,
         			canvas: this.canvas,
         		});
         		document.body.appendChild(this.canvas);
         		this.threejs = renderer;
         		// disable scroll
         		document.body.style.overflow = "hidden";
         
         		// bind the resize event
         		window.addEventListener("resize", this.onWindowResize.bind(this), false);
         		this.scene = new THREE.Scene();
         
         		this.camera = new THREE.OrthographicCamera(0, 1, 1, 0, 0.1, 1000);
         		this.camera.position.set(0, 0, 1);
         
         		await this.setupProject();
         
         		this.previousRAF = null;
         		this.onWindowResize();
         		this.raf();
         	}
         
         	async setupProject() {
         		const vsh = `
         varying vec2 vUvs;
         
         void main() {	
         gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
         vUvs = uv;
         }
         `;
         		const fsh = `
         varying vec2 vUvs;
         uniform vec2 resolution;
         uniform float time;
         uniform sampler2D diffuse1;
         uniform sampler2D diffuse2;
         
         
         float inverseLerp(float v, float minValue, float maxValue) {
         return (v - minValue) / (maxValue - minValue);
         }
         
         float remap(float v, float inMin, float inMax, float outMin, float outMax) {
         float t = inverseLerp(v, inMin, inMax);
         return mix(outMin, outMax, t);
         }
         
         // The MIT License
         // Copyright © 2013 Inigo Quilez
         // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
         // https://www.youtube.com/c/InigoQuilez
         // https://iquilezles.org/
         //
         // https://www.shadertoy.com/view/Xsl3Dl
         vec3 hash( vec3 p ) // replace this by something better
         {
         p = vec3( dot(p,vec3(127.1,311.7, 74.7)),
         dot(p,vec3(269.5,183.3,246.1)),
         dot(p,vec3(113.5,271.9,124.6)));
         
         return -1.0 + 2.0*fract(sin(p)*43758.5453123);
         }
         
         float noise( in vec3 p )
         {
         vec3 i = floor( p );
         vec3 f = fract( p );
         
         vec3 u = f*f*(3.0-2.0*f);
         
         return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), 
         dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),
         mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), 
         dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),
         mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), 
         dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),
         mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), 
         dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );
         }
         
         float fbm(vec3 p, int octaves, float persistence, float lacunarity) {
         float amplitude = 1.0;
         float frequency = 1.0;
         float total = 0.0;
         float normalization = 0.0;
         
         for (int i = 0; i < octaves; ++i) {
         float noiseValue = noise(p * frequency);
         total += noiseValue * amplitude;
         normalization += amplitude;
         amplitude *= persistence;
         frequency *= lacunarity;
         }
         
         total /= normalization;
         total = smoothstep(-1.0, 1.0, total);
         
         return total;
         }
         
         float sdfCircle(vec2 p, float r) {
         return length(p) - r;
         }
         
         float sdEllipse( in vec2 p, in vec2 ab )
         {
         p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}
         float l = ab.y*ab.y - ab.x*ab.x;
         float m = ab.x*p.x/l;      float m2 = m*m; 
         float n = ab.y*p.y/l;      float n2 = n*n; 
         float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;
         float q = c3 + m2*n2*2.0;
         float d = c3 + m2*n2;
         float g = m + m*n2;
         float co;
         if( d<0.0 )
         {
         float h = acos(q/c3)/3.0;
         float s = cos(h);
         float t = sin(h)*sqrt(3.0);
         float rx = sqrt( -c*(s + t + 2.0) + m2 );
         float ry = sqrt( -c*(s - t + 2.0) + m2 );
         co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;
         }
         else
         {
         float h = 2.0*m*n*sqrt( d );
         float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);
         float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);
         float rx = -s - u - c*4.0 + 2.0*m2;
         float ry = (s - u)*sqrt(3.0);
         float rm = sqrt( rx*rx + ry*ry );
         co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;
         }
         vec2 r = ab * vec2(co, sqrt(1.0-co*co));
         return length(r-p) * sign(p.y-r.y);
         }
         
         float cubicBezier(float t, vec2 p0, vec2 p1, vec2 p2, vec2 p3) {
         float u = 1.0 - t;
         float tt = t * t;
         float uu = u * u;
         float uuu = uu * u;
         float ttt = tt * t;
         
         vec2 p = uuu * p0; //first term
         p += 3.0 * uu * t * p1; //second term
         p += 3.0 * u * tt * p2; //third term
         p += ttt * p3; //fourth term
         
         return p.y;
         }
         
         float customEase(float t) {
         // Normalize t from 0-15 to 0-1
         t = clamp(t / 15.0, 0.0, 1.0);
         
         // Define control points for each section
         vec2 p0 = vec2(0.0, 0.0);
         vec2 p1 = vec2(0.114, 0.402);
         vec2 p2 = vec2(0.14, 0.475);
         vec2 p3 = vec2(0.497, 0.563);
         vec2 p4 = vec2(0.778, 0.632);
         vec2 p5 = vec2(0.878, 0.629);
         vec2 p6 = vec2(1.0, 1.0);
         
         if (t < 1.0 / 3.0) {
         // Scale t for the first segment
         t = t / (1.0 / 3.0);
         return cubicBezier(t, p0, p1, p2, p3);
         } else  {
         // Scale t for the second segment
         t = (t - 1.0 / 3.0) / (1.0 / 3.0);
         return cubicBezier(t, p3, p4, p5, p6); // Control points may need to be re-adjusted
         } 
         }
         
         
         void main() {
         vec2 pixelCoords = (vUvs - 0.5) * resolution;
         
         float noiseSample = fbm(vec3(pixelCoords, 0.0) * 0.005, 4, 0.5, 2.0);
         // use expo out easing 
         float easingTime = customEase(time * 5.5);
         
         float size = easingTime * (50.0 + length(resolution) * 0.5);
         //   float d = sdfCircle(pixelCoords + 50.0 * noiseSample, size);
         
         float d = sdEllipse(pixelCoords + 50.0 * noiseSample, vec2(size, size * 0.8));
         vec2 distortion = noiseSample / resolution;
         vec2 uvDistortion = distortion * 20.0 * smoothstep(80.0, 20.0, d);
         
         vec3 sample1 = vec3(0.0627, 0.0627, 0.0627); 
         vec3 sample2 = texture2D(diffuse2, vUvs).xyz;
         vec3 colour = sample1;
         
         // Create the dark burning effect
         float burnAmount = 1.0 - exp(-d*d*0.01);
         colour = mix(vec3(0.0), colour, burnAmount);
         
         colour = mix(sample2, colour, smoothstep(0.0, 1.0, d));
         
         // Add a fiery glow
         float glowAmount = smoothstep(0.0, .0, abs(d));
         glowAmount = 1.0 - pow(glowAmount, 0.125);
         colour += glowAmount * vec3(1.0, 0.2, 0.05);
         
         // Add transparent on revealed area
         float revealAmount = smoothstep(0.0, 1.0, d);
         
         gl_FragColor = vec4(colour, revealAmount);
         }
         `;
         
         		const loader = new THREE.TextureLoader();
         		// const bgTexture = loader.load("./background-grey-dots.png");
         
         		const material = new THREE.ShaderMaterial({
         			uniforms: {
         				resolution: {
         					value: new THREE.Vector2(window.innerWidth, window.innerHeight),
         				},
         				time: { value: 0.0 },
         				diffuse1: { value: null },
         				diffuse2: { value: null },
         			},
         			vertexShader: vsh,
         			fragmentShader: fsh,
         		});
         
         		this.material = material;
         
         		const geometry = new THREE.PlaneGeometry(1, 1);
         		const plane = new THREE.Mesh(geometry, material);
         		plane.position.set(0.5, 0.5, 0);
         		this.scene.add(plane);
         
         		this.totalTime = 0;
         		this.onWindowResize();
         	}
         
         	onWindowResize() {
         		if (!this.threejs) return;
         		const dpr = window.devicePixelRatio;
         		this.canvas.style.width = window.innerWidth + 500 + "px";
         		this.canvas.style.height = window.innerHeight + 500 + "px";
         		const w = this.canvas.clientWidth;
         		const h = this.canvas.clientHeight;
         
         		this.threejs.setSize(w * dpr, h * dpr, false);
         		this.material.uniforms.resolution.value = new THREE.Vector2(
         			window.innerWidth * dpr,
         			window.innerHeight * dpr,
         		);
         	}
         
         	raf() {
         		requestAnimationFrame((t) => {
         			if (this.totalTime > 2.8) {
         				this.canvas.style.backdropFilter = "blur(0px)";
         			}
         			if (this.totalTime > 3 && this.threejs) {
         				this.canvas.style.filter = "blur(0px)";
         
         				setTimeout(() => {
         					this.canvas.style.backdropFilter = "blur(2px)";
         				}, 500);
         
         				setTimeout(() => {
         					this.canvas.style.backdropFilter = "blur(0px)";
         				}, 1000);
         				// clean resize event
         				window.removeEventListener("resize", this.onWindowResize, false);
         				setTimeout(() => {
         					// remove the renderer and the canvas
         					this.threejs.domElement.remove();
         					this.threejs = null;
         					// return scroll to body
         					document.body.style.overflow = "";
         				}, 1500);
         
         				return;
         			}
         
         			if (this.canvas) {
         				this.canvas.style.filter = `blur(${Math.max(
         					Math.cos(this.totalTime * 1.2) * 100,
         					10,
         				)}px)`;
         			}
         
         			if (this.previousRAF === null) {
         				this.previousRAF = t;
         			}
         
         			this.step(t - this.previousRAF);
         			this.threejs.render(this.scene, this.camera);
         			this.raf();
         			this.previousRAF = t;
         		});
         	}
         
         	step(timeElapsed) {
         		// const timeElapsedS = timeElapsed * 0.0001;
         		const timeElapsedS = timeElapsed * 0.0005 * 3.33;
         		this.totalTime += timeElapsedS;
         
         		this.material.uniforms.time.value = THREE.MathUtils.lerp(
         			this.material.uniforms.time.value,
         			this.totalTime,
         			0.1,
         		);
         	}
         }
         
         let APP = null;
         
         document.addEventListener("DOMContentLoaded", () => {
         	const overlayElem = document.querySelector(".entry-close-overlay");
         	const actionsElems = document.querySelectorAll("[data-revieal]");
         
         	const handleClick = async () => {
         		setTimeout(() => {
         			APP = new BurnReveal();
         			APP.initialize();
         		}, 200);
         	};
         	const handleOverlayClick = async () => {
         		setTimeout(() => {
         			APP = new BurnReveal();
         			APP.initialize();
         		}, 3000);
         	};
         
         	if (overlayElem) {
         		overlayElem.addEventListener("click", handleOverlayClick);
         	}
         
         	const lsRevial = localStorage.getItem("revial");
         	if (lsRevial === "true") {
         		if (window.location.pathname !== "/") {
         			handleClick();
         			localStorage.setItem("revial", "");
         		}
         	}
         
         	const handleActionClick = () => {
         		localStorage.setItem("revial", "true");
         	};
         	actionsElems.forEach((el) => {
         		el.addEventListener("click", handleActionClick);
         	});
         });
         
         (() => {
         // Hero video
         const heroBGVideo = document.querySelector(".hero_video video");
         const entryElement = document.querySelector(".entry_element");
         
         // Intro overlay
         const introCloseOverlay = document.querySelector(".entry-close-overlay");
         const body = document.querySelector("body");
         
         const postEntryContainer = document.querySelector(
         	".home_post_entry_container",
         );
         const postEntryVideo = postEntryContainer.querySelector("video");
         
         if (postEntryVideo) {
         	postEntryContainer.style.display = "block";
         	postEntryVideo.load();
         }
         
         function handler() {
         	let currentFrame = 0;
         	let msPerFrame = 100;
         
         	const getFrameIndex = (delay) => {
         		return Math.floor((delay || 1) / msPerFrame);
         	};
         
         	let introInterval;
         
         	introInterval = setInterval(() => {
         		switch (currentFrame) {
         			case getFrameIndex(300): {
         				try {
         					postEntryVideo.play();
         				} catch (error) {
         					console.error(error);
         				}
         				break;
         			}
         			case getFrameIndex(2800): {
         				postEntryVideo.parentElement.style.opacity = 0;
         
         				if (heroBGVideo) {
         					heroBGVideo.play();
         				}
         				break;
         			}
         			case getFrameIndex(3100): {
         				postEntryContainer.style.display = "none";
         				break;
         			}
         			case getFrameIndex(6100): {
         				body.classList.add("opened");
         
         				clearInterval(introInterval);
         				introInterval = null;
         				break;
         			}
         		}
         
         		currentFrame++;
         	}, msPerFrame);
         }
         
         introCloseOverlay.addEventListener("click", handler);
         
         // Preloader + Intro
         const preloaderTrigger = document.querySelector("[data-preloader-trigger]");
         const introTrigger = document.querySelector("[data-intro-trigger]");
         const skipTrigger = document.querySelector("[data-skip-trigger]");
         
         const homeCachedAt = localStorage.getItem("homeCachedAt");
         let homeDisableIntro = localStorage.getItem("homeDisableIntro");
         const homeDisableIntroAt = localStorage.getItem("homeDisableIntroAt");
         const isHomeCached =
         	homeCachedAt && Date.now() - homeCachedAt < 1000 * 60 * 60 * 3;
         
         window.scrollY = 0;
         
         if (homeDisableIntroAt && Date.now() - homeDisableIntroAt > 1000 * 2) {
         	homeDisableIntro = "false";
         	localStorage.removeItem("homeDisableIntro");
         	localStorage.removeItem("homeDisableIntroAt");
         }
         
         if (homeDisableIntro !== "true") {
         	if (isHomeCached) {
         		setTimeout(() => {
         			introTrigger.style.bottom = "0px";
         			window.scrollTo(0, 1);
         			window.scrollTo(0, 0);
         		}, 100);
         	} else {
         		preloaderTrigger.style.bottom = "0px";
         		window.scrollTo(0, 1);
         		window.scrollTo(0, 0);
         		setTimeout(() => {
         			introTrigger.style.bottom = "0px";
         			window.scrollTo(0, 1);
         			window.scrollTo(0, 0);
         			localStorage.setItem("homeCachedAt", Date.now());
         		}, 3500);
         	}
         } else {
         	skipTrigger.style.bottom = "0px";
         	window.scrollTo(0, 1);
         	window.scrollTo(0, 0);
         	body.classList.add("opened");
         	heroBGVideo.play();
         	localStorage.removeItem("homeDisableIntro");
         }
         
         //Handle Refresh
         window.onbeforeunload = () => {
         	localStorage.setItem("homeDisableIntro", "true");
         	localStorage.setItem("homeDisableIntroAt", Date.now());
         };
         
         //Hero volume button
         const heroVolumeButton = document.querySelector(
         	".home_hero_volume_container",
         );
         
         const soundIcon = heroVolumeButton.querySelector(
         	".home_hero_volume_icon_sound",
         );
         const muteIcon = heroVolumeButton.querySelector(
         	".home_hero_volume_icon_mute",
         );
         const volumeText = heroVolumeButton.querySelector(".home_hero_volume_text");
         
         soundIcon.classList.add("hidden");
         
         heroVolumeButton.addEventListener("click", () => {
         	if (volumeText.innerHTML !== "volume on") {
         		soundIcon.style.opacity = 1;
         		muteIcon.style.opacity = 0;
         
         		volumeText.innerHTML = "volume on";
         
         		heroBGVideo.volume = 0.1;
         		heroBGVideo.muted = false;
         	} else {
         		soundIcon.style.opacity = 0;
         		muteIcon.style.opacity = 1;
         
         		volumeText.innerHTML = "volume off";
         
         		heroBGVideo.muted = true;
         	}
         });
         
         // Works videos
         const counterInner = document.querySelector(".home_works_counter_inner");
         
         const counterParts = Array.from(
         	counterInner.querySelectorAll(".home_works_pagination_wrapper"),
         );
         
         Array.from(document.querySelectorAll(".works_vid_block"))
         	.map((worksContainer) => {
         		const video = worksContainer.querySelector("video");
         		const volumeBtn = worksContainer.querySelector(".corners_button");
         		const volumeContainer = worksContainer.querySelector(
         			".ourworks_volume_wrapper",
         		);
         		const stateBtn = worksContainer.querySelector(
         			"[data-video-state-button]",
         		);
         		const icons = Array.from(stateBtn?.querySelectorAll("svg") ?? []);
         
         		return {
         			video,
         			volumeBtn,
         			volumeContainer,
         			stateBtn,
         			pauseIcon: icons[0],
         			playIcon: icons[1],
         			workContainer: worksContainer,
         		};
         	})
         	.forEach(
         		(
         			{
         				video,
         				volumeBtn,
         				volumeContainer,
         				stateBtn,
         				playIcon,
         				pauseIcon,
         				workContainer,
         			},
         			index,
         			array,
         		) => {
         			// Volume
         			video.volume = 0.1;
         			video.muted = true;
         
         			const soundIcon = volumeContainer.querySelector(
         				".ourworks_volume_icon_sound",
         			);
         			const muteIcon = volumeContainer.querySelector(
         				".ourworks_volume_icon_mute",
         			);
         
         			volumeContainer.addEventListener("click", () => {
         				const isMuted = volumeBtn.textContent != "volume on";
         
         				video.muted = !isMuted;
         				volumeBtn.textContent = isMuted ? "volume on" : "volume off";
         				soundIcon.style.opacity = isMuted ? 1 : 0;
         				muteIcon.style.opacity = isMuted ? 0 : 1;
         
         				// Mute all other videos
         				if (!heroBGVideo.muted) {
         					heroVolumeButton.click();
         				}
         
         				array.forEach(
         					({
         						video: otherVideo,
         						volumeBtn: otherVolumeBtn,
         						volumeContainer: otherVolumeContainer,
         					}) => {
         						if (otherVideo !== video) {
         							const otherSoundIcon = otherVolumeContainer.querySelector(
         								".ourworks_volume_icon_sound",
         							);
         							const otherMuteIcon = otherVolumeContainer.querySelector(
         								".ourworks_volume_icon_mute",
         							);
         
         							otherVideo.muted = true;
         							otherVolumeBtn.textContent = "volume off";
         							otherSoundIcon.style.opacity = 0;
         							otherMuteIcon.style.opacity = 1;
         						}
         					},
         				);
         			});
         
         			// Pause and play
         			stateBtn?.addEventListener("click", (e) => {
         				e.stopPropagation();
         
         				const isPlaying = !video.paused;
         
         				if (isPlaying) {
         					video.pause();
         					playIcon.style.opacity = 1;
         					pauseIcon.style.opacity = 0;
         				} else {
         					video.play();
         					playIcon.style.opacity = 0;
         					pauseIcon.style.opacity = 1;
         				}
         			});
         
         			// Counter
         			const observer = new IntersectionObserver(
         				(entries) => {
         					entries.forEach((entry) => {
         						if (entry.isIntersecting) {
         							counterParts[index].classList.add("active");
         							counterParts[index].classList.remove("inactive");
         
         							counterParts.forEach((part, partIndex) => {
         								if (partIndex !== index) {
         									part.classList.remove("active");
         									part.classList.add("inactive");
         								}
         							});
         						} else {
         							counterParts[index].classList.remove("active");
         							counterParts[index].classList.add("inactive");
         						}
         					});
         				},
         				{
         					root: null,
         					threshold: 0.7,
         					rootMargin: "0px",
         				},
         			);
         
         			observer.observe(workContainer);
         		},
         	);
         })();
         
      </script>
   </body>
</html>
